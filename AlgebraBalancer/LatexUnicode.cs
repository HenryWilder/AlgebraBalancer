using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace AlgebraBalancer;
internal static class LatexUnicode
{
    public static readonly (Regex shorthand, MatchEvaluator evaluator)[] unicodeShorthands =
    [
        (new Regex(@"@0",           RegexOptions.Compiled), (match) => "°"),
        (new Regex(@"@/",           RegexOptions.Compiled), (match) => "÷"),
        (new Regex(@"@\*",          RegexOptions.Compiled), (match) => "×"),
        (new Regex(@"@\^",          RegexOptions.Compiled), (match) => "̂"),
        (new Regex(@"@_",           RegexOptions.Compiled), (match) => "̄"),
        (new Regex(@"@;",           RegexOptions.Compiled), (match) => "̇"),
        (new Regex(@"@:",           RegexOptions.Compiled), (match) => "̈"),
        (new Regex(@"@G",           RegexOptions.Compiled), (match) => "Γ"),
        (new Regex(@"@D",           RegexOptions.Compiled), (match) => "Δ"),
        (new Regex(@"@Q",           RegexOptions.Compiled), (match) => "Θ"),
        (new Regex(@"@X",           RegexOptions.Compiled), (match) => "Ξ"),
        (new Regex(@"@P",           RegexOptions.Compiled), (match) => "Π"),
        (new Regex(@"@S",           RegexOptions.Compiled), (match) => "Σ"),
        (new Regex(@"@U",           RegexOptions.Compiled), (match) => "ϒ"),
        (new Regex(@"@F",           RegexOptions.Compiled), (match) => "Φ"),
        (new Regex(@"@Y",           RegexOptions.Compiled), (match) => "Ψ"),
        (new Regex(@"@W",           RegexOptions.Compiled), (match) => "Ω"),
        (new Regex(@"@a",           RegexOptions.Compiled), (match) => "α"),
        (new Regex(@"@b",           RegexOptions.Compiled), (match) => "β"),
        (new Regex(@"@g",           RegexOptions.Compiled), (match) => "γ"),
        (new Regex(@"@d",           RegexOptions.Compiled), (match) => "δ"),
        (new Regex(@"@ve",          RegexOptions.Compiled), (match) => "ε"),
        (new Regex(@"@z",           RegexOptions.Compiled), (match) => "ζ"),
        (new Regex(@"@h",           RegexOptions.Compiled), (match) => "η"),
        (new Regex(@"@q",           RegexOptions.Compiled), (match) => "θ"),
        (new Regex(@"@i",           RegexOptions.Compiled), (match) => "ι"),
        (new Regex(@"@k",           RegexOptions.Compiled), (match) => "κ"),
        (new Regex(@"@l",           RegexOptions.Compiled), (match) => "λ"),
        (new Regex(@"@m",           RegexOptions.Compiled), (match) => "μ"),
        (new Regex(@"@n",           RegexOptions.Compiled), (match) => "ν"),
        (new Regex(@"@x",           RegexOptions.Compiled), (match) => "ξ"),
        (new Regex(@"@p",           RegexOptions.Compiled), (match) => "π"),
        (new Regex(@"@L",           RegexOptions.Compiled), (match) => "Λ"),
        (new Regex(@"@r",           RegexOptions.Compiled), (match) => "ρ"),
        (new Regex(@"@vs",          RegexOptions.Compiled), (match) => "ς"),
        (new Regex(@"@s",           RegexOptions.Compiled), (match) => "σ"),
        (new Regex(@"@t",           RegexOptions.Compiled), (match) => "τ"),
        (new Regex(@"@u",           RegexOptions.Compiled), (match) => "υ"),
        (new Regex(@"@vf",          RegexOptions.Compiled), (match) => "φ"),
        (new Regex(@"@c",           RegexOptions.Compiled), (match) => "χ"),
        (new Regex(@"@y",           RegexOptions.Compiled), (match) => "ψ"),
        (new Regex(@"@o",           RegexOptions.Compiled), (match) => "ω"),
        (new Regex(@"@vb",          RegexOptions.Compiled), (match) => "ϐ"),
        (new Regex(@"@vq",          RegexOptions.Compiled), (match) => "ϑ"),
        (new Regex(@"@f",           RegexOptions.Compiled), (match) => "ϕ"),
        (new Regex(@"@vp",          RegexOptions.Compiled), (match) => "ϖ"),
        (new Regex(@"@A",           RegexOptions.Compiled), (match) => "∀"),
        (new Regex(@"@6",           RegexOptions.Compiled), (match) => "∂"),
        (new Regex(@"@E",           RegexOptions.Compiled), (match) => "∃"),
        (new Regex(@"@v0",          RegexOptions.Compiled), (match) => "∅"),
        (new Regex(@"@@",           RegexOptions.Compiled), (match) => "∘"),
        (new Regex(@"@2",           RegexOptions.Compiled), (match) => "√"),
        (new Regex(@"√(?:\^3|³)",   RegexOptions.Compiled), (match) => "∛"),
        (new Regex(@"√(?:\^4|⁴)",   RegexOptions.Compiled), (match) => "∜"),
        (new Regex(@"@8",           RegexOptions.Compiled), (match) => "∞"),
        (new Regex(@"@\|",          RegexOptions.Compiled), (match) => "∣"),
        (new Regex(@"@&",           RegexOptions.Compiled), (match) => "∧"),
        (new Regex(@"@I",           RegexOptions.Compiled), (match) => "∫"),
        (new Regex(@"∫∫",           RegexOptions.Compiled), (match) => "∬"),
        (new Regex(@"∫(?:∫∫|∬)|∬∫", RegexOptions.Compiled), (match) => "∭"),
        (new Regex(@"@\\",          RegexOptions.Compiled), (match) => "⧵"),
        (new Regex(@"∫(?:∫(?:∫∫|∬)|∬∫|∭)|∬(?:∫∫|∬)|∭∫", RegexOptions.Compiled), (match) => "⨌"),
        (new Regex(@"@=",           RegexOptions.Compiled), (match) => "≡"),
        (new Regex(@"@<",           RegexOptions.Compiled), (match) => "≤"),
        (new Regex(@"@>",           RegexOptions.Compiled), (match) => "≥"),
        (new Regex(@"@-",           RegexOptions.Compiled), (match) => "⋂"),
        (new Regex(@"@\+",          RegexOptions.Compiled), (match) => "⋃"),
        (new Regex(@"@\.",          RegexOptions.Compiled), (match) => "⋅"),

        (new Regex(@"\\Algebraic\\",  RegexOptions.Compiled), (match) => "𝔸"),
        (new Regex(@"\\Boolean\\",    RegexOptions.Compiled), (match) => "𝔹"),
        (new Regex(@"\\Complex\\",    RegexOptions.Compiled), (match) => "ℂ"),
        (new Regex(@"\\Quaternion\\", RegexOptions.Compiled), (match) => "ℍ"),
        (new Regex(@"\\Imaginary\\",  RegexOptions.Compiled), (match) => "𝕀"),
        (new Regex(@"\\Monster\\",    RegexOptions.Compiled), (match) => "𝕄"),
        (new Regex(@"\\Natural\\",    RegexOptions.Compiled), (match) => "ℕ"),
        (new Regex(@"\\Natural0\\",   RegexOptions.Compiled), (match) => "ℕ₀"),
        (new Regex(@"\\Irrational\\", RegexOptions.Compiled), (match) => "ℙ"),
        (new Regex(@"\\Rational\\",   RegexOptions.Compiled), (match) => "ℚ"),
        (new Regex(@"\\Real\\",       RegexOptions.Compiled), (match) => "ℝ"),
        (new Regex(@"\\Whole\\",      RegexOptions.Compiled), (match) => "𝕎"),
        (new Regex(@"\\Integer\\",    RegexOptions.Compiled), (match) => "ℤ"),

        (new Regex(@"\$([A-Za-z0-9])", RegexOptions.Compiled), (Match match) => {
            char lookfor = match.Groups[1].Value.First(); // Should only be one character
            return bbMapping.TryGetValue(lookfor, out string replacement) ? replacement : lookfor.ToString();
        }),

        (new Regex(@"\\(?:Int\\|big∫)", RegexOptions.Compiled), (match) => "⌠\r⌡\r"),
        (new Regex(@"\\big\(\)", RegexOptions.Compiled), (match) => "⎛ & & ⎞\r⎝ & & ⎠"),
        (new Regex(@"\\bigg\(\)", RegexOptions.Compiled), (match) => "⎛ && ⎞\r⎜ && ⎟\r⎝ && ⎠"),
        (new Regex(@"\\big\[\]", RegexOptions.Compiled), (match) => "⎡ && ⎤\r⎣ && ⎦"),
        (new Regex(@"\\bigg\[\]", RegexOptions.Compiled), (match) => "⎡ && ⎤\r⎢ && ⎥\r⎣ && ⎦"),
        (new Regex(@"\\matrix\\", RegexOptions.Compiled), (match) => "⎡ & ... && ... && ... & ⎤\r⎢ & ... && ... && ... & ⎥\r⎣ & ... && ... && ... & ⎦"),
        (new Regex(@"\\det\\", RegexOptions.Compiled), (match) => "⎢ & ... && ... && ... & ⎥\r⎢ & ... && ... && ... & ⎥\r⎢ & ... && ... && ... & ⎥"),
        (new Regex(@"\\(matrix|det)([1-9])x([1-9])", RegexOptions.Compiled), (match) => {
            bool isDet = match.Groups[1].Value == "det";
            int rows = Convert.ToInt32(match.Groups[2].Value);
            int cols = Convert.ToInt32(match.Groups[3].Value);

            string result = "";

            void FillRow() {
                for (int i = 0; i < cols; ++i)
                    result += "& ... &";
            }

            if (rows == 1)
            {
                result += isDet ? "| " : "[ ";
                FillRow();
                result += isDet ? " |\r" : " ]\r";
            }
            else
            {
                for (int i = 0; i < rows; ++i)
                {
                    int kind;
                    if (i == 0)
                        kind = 0;
                    else if (i == rows - 1)
                        kind = 2;
                    else
                        kind = 1;

                    result += isDet ? "⎢" : "⎡⎢⎣"[kind];
                    FillRow();
                    result += isDet ? "⎥" : "⎤⎥⎦"[kind];
                    result += '\r';
                }
            }
            return result;
        }),

        (new Regex(@"\\bigg\{\}", RegexOptions.Compiled), (match) => "⎧ && ⎫\r⎨ && ⎬\r⎩ && ⎭"),
        (new Regex(@"\\huge\{\}", RegexOptions.Compiled), (match) => "⎧ && ⎫\r⎪ && ⎪\r⎨ && ⎬\r⎪ && ⎪\r⎩ && ⎭"),
        (new Regex(@"\\cases\\", RegexOptions.Compiled), (match) => "⎧ & ... & if ...\r⎪ & ... & if ...\r⎨ & ... & if ...\r⎪ & ... & if ...\r⎩ & ... & otherwise"),
        (new Regex(@"\\rcases\\", RegexOptions.Compiled), (match) => "& ... & if ...    & ⎫\r& ... & if ...    & ⎪\r& ... & if ...    & ⎬\r& ... & if ...    & ⎪\r& ... & otherwise & ⎭"),
        (new Regex(@"\\(r?cases)([1-9])", RegexOptions.Compiled), (match) => {
            bool isReverse = match.Groups[1].Value == "rcases";
            int cases = Convert.ToInt32(match.Groups[2].Value);

            string result = "";

            void FillRow() => result += "... & if ...";

            switch (cases)
            {
                case 1:
                    if (!isReverse)
                    {
                        result += "{ & ";
                        FillRow();
                        result += '\r';
                    }
                    else
                    {
                        result += "& ";
                        FillRow();
                        result += " & }\r";
                    }
                    break;

                case 2:
                    if (!isReverse)
                    {
                        result += "⎰ & ";
                        FillRow();
                        result += "\r⎱ & ";
                        FillRow();
                        result += '\r';
                    }
                    else
                    {
                        result += "& ";
                        FillRow();
                        result += " & ⎱\r";
                        FillRow();
                        result += " & ⎰\r";
                    }
                    break;

                default:
                    for (int i = 0; i < cases; ++i)
                    {
                        int kind;
                        if (i == 0)
                            kind = 0;
                        else if (i == cases - 1)
                            kind = 3;
                        else if (i == cases / 2)
                            kind = 1;
                        else
                            kind = 2;

                        result += (isReverse ? "" : "⎧⎨⎪⎩"[kind]) + " & ";
                        FillRow();
                        result += (isReverse ? " & " + "⎫⎬⎪⎭"[kind] : "") + "\r";
                    }
                    break;
            }
            return result;
        }),

        (new Regex(@"\\big\{\}", RegexOptions.Compiled), (match) => "⎰ && ⎱\r⎱ && ⎰"),
        (new Regex(@"\\Sum\\", RegexOptions.Compiled), (match) => "⎲\r⎳"),
        (new Regex(@"\\big√", RegexOptions.Compiled), (match) => " _\r⎷"),
    ];

    public static readonly Dictionary<string, string> unicodeReplacements = new()
    {
        { @"\iexcl\", "¡" },
        { @"\cent\", "¢" },
        { @"\pounds\", "£" },
        { @"\currency\", "¤" },
        { @"\yen\", "¥" },
        { @"\brvbar\", "¦" },
        { @"\sect\", "§" },
        { @"\spddot\", "¨" },
        { @"\neg\", "¬" },
        { @"\circledR\", "®" },
        { @"\deg\", "°" },
        { @"\pm\", "±" },
        { @"\Micro\", "µ" },
        { @"\para\", "¶" },
        { @"\cdotp\", "·" },
        { @"\frac14\", "¼" },
        { @"\frac12\", "½" },
        { @"\frac34\", "¾" },
        { @"\iquest\", "¿" },
        { @"\times\", "×" },
        { @"\minus\", "−" },
        { @"\ndash\", "−" },
        { @"\mdash\", "—" },
        { @"\eth\", "ð" },
        { @"\div\", "÷" },
        { @"\Imath\", "ı" },
        { @"\Zbar\", "Ƶ" },
        { @"\Jmath\", "ȷ" },
        { @"\grave\", "̀" },
        { @"\acute\", "́" },
        { @"\hat\", "̂" },
        { @"\tilde\", "̃" },
        { @"\bar\", "̄" },
        { @"\overline\", "̅" },
        { @"\breve\", "̆" },
        { @"\dot\", "̇" },
        { @"\ddot\", "̈" },
        { @"\ovhook\", "̉" },
        { @"\mathring\", "̊" },
        { @"\check\", "̌" },
        { @"\candra\", "̐" },
        { @"\oturnedcomma\", "̒" },
        { @"\ocommatopright\", "̕" },
        { @"\droang\", "̚" },
        { @"\utilde\", "̰" },
        { @"\underbar\", "̱" },
        { @"\underline\", "̲" },
        { @"\twolowbar\", "̳" },
        { @"\not\", "̸" },
        { @"\Alpha\", "Α" },
        { @"\Beta\", "Β" },
        { @"\Gamma\", "Γ" },
        { @"\Delta\", "Δ" },
        { @"\Epsilon\", "Ε" },
        { @"\Zeta\", "Ζ" },
        { @"\Eta\", "Η" },
        { @"\Theta\", "Θ" },
        { @"\Iota\", "Ι" },
        { @"\Kappa\", "Κ" },
        { @"\Lambda\", "Λ" },
        { @"\Mu\", "Μ" },
        { @"\Nu\", "Ν" },
        { @"\Xi\", "Ξ" },
        { @"\Omicron\", "Ο" },
        { @"\Pi\", "Π" },
        { @"\Rho\", "Ρ" },
        { @"\Sigma\", "Σ" },
        { @"\Tau\", "Τ" },
        { @"\Upsilon\", "ϒ" },
        { @"\Phi\", "Φ" },
        { @"\Chi\", "Χ" },
        { @"\Psi\", "Ψ" },
        { @"\Omega\", "Ω" },
        { @"\alpha\", "α" },
        { @"\beta\", "β" },
        { @"\gamma\", "γ" },
        { @"\delta\", "δ" },
        { @"\varepsilon\", "ε" },
        { @"\zeta\", "ζ" },
        { @"\eta\", "η" },
        { @"\theta\", "θ" },
        { @"\iota\", "ι" },
        { @"\kappa\", "κ" },
        { @"\lambda\", "λ" },
        { @"\mu\", "μ" },
        { @"\nu\", "ν" },
        { @"\xi\", "ξ" },
        { @"\omicron\", "ο" },
        { @"\pi\", "π" },
        { @"\rho\", "ρ" },
        { @"\varsigma\", "ς" },
        { @"\sigma\", "σ" },
        { @"\tau\", "τ" },
        { @"\upsilon\", "υ" },
        { @"\varphi\", "φ" },
        { @"\chi\", "χ" },
        { @"\psi\", "ψ" },
        { @"\omega\", "ω" },
        { @"\varbeta\", "ϐ" },
        { @"\vartheta\", "ϑ" },
        { @"\phi\", "ϕ" },
        { @"\varpi\", "ϖ" },
        { @"\Qoppa\", "Ϙ" },
        { @"\qoppa\", "ϙ" },
        { @"\Stigma\", "Ϛ" },
        { @"\stigma\", "ϛ" },
        { @"\Digamma\", "Ϝ" },
        { @"\digamma\", "ϝ" },
        { @"\Koppa\", "Ϟ" },
        { @"\koppa\", "ϟ" },
        { @"\Sampi\", "Ϡ" },
        { @"\sampi\", "ϡ" },
        { @"\varkappa\", "ϰ" },
        { @"\varrho\", "ϱ" },
        { @"\varTheta\", "ϴ" },
        { @"\epsilon\", "ϵ" },
        { @"\backepsilon\", "϶" },
        { @"\Sha\", "Ш" },
        { @"\Vert\", "‖" },
        { @"\twolowline\", "‗" },
        { @"\dagger\", "†" },
        { @"\ddagger\", "‡" },
        { @"\bullet\", "•" },
        { @"\enleadertwodots\", "‥" },
        { @"\ldots\", "…" },
        { @"\prime\", "′" },
        { @"\second\", "″" },
        { @"\third\", "‴" },
        { @"\backprime\", "‵" },
        { @"\backdprime\", "‶" },
        { @"\backtrprime\", "‷" },
        { @"\caretinsert\", "‸" },
        { @"\KomeJirushi\", "※" },
        { @"\Exclam\", "‼" },
        { @"\cat\", "⁀" },
        { @"\hyphenbullet\", "⁃" },
        { @"\fracslash\", "⁄" },
        { @"\Question\", "⁇" },
        { @"\bsemi\", "⁏" },
        { @"\closure\", "⁐" },
        { @"\Ast\", "⁑" },
        { @"./.", "⁒" },
        { @"\fourth\", "⁗" },
        { @"\euro\", "€" },
        { @"\enclosecircle\", "x⃝" },
        { @"\asteraccent\", "x⃰" },
        { @"\Euler\", "ℇ" },
        { @"\Planckconst\", "ℎ" },
        { @"\hslash\", "ℏ" },
        { @"\Im\", "ℑ" },
        { @"\ell\", "ℓ" },
        { @"\wp\", "℘" },
        { @"\Re\", "ℜ" },
        { @"\tcohm\", "Ω" },
        { @"\mho\", "℧" },
        { @"\turnediota\", "℩" },
        { @"\Angstroem\", "Å" },
        { @"\Finv\", "Ⅎ" },
        { @"\aleph\", "ℵ" },
        { @"\beth\", "ℶ" },
        { @"\gimel\", "ℷ" },
        { @"\daleth\", "ℸ" },
        { @"\Game\", "⅁" },
        { @"\sansLturned\", "⅂" },
        { @"\sansLmirrored\", "⅃" },
        { @"\Yup\", "⅄" },
        { @"\CapitalDifferentialD\", "ⅅ" },
        { @"\DifferentialD\", "ⅆ" },
        { @"\ExponetialE\", "ⅇ" },
        { @"\ComplexI\", "ⅈ" },
        { @"\ComplexJ\", "ⅉ" },
        { @"\PropertyLine\", "⅊" },
        { @"\invamp\", "⅋" },
        { @"\leftarrow\", "←" },
        { @"\gets\", "←" },
        { @"\uparrow\", "↑" },
        { @"\rightarrow\", "→" },
        { @"\to\", "→" },
        { @"\downarrow\", "↓" },
        { @"\leftrightarrow\", "↔" },
        { @"\updownarrow\", "↕" },
        { @"\nwarrow\", "↖" },
        { @"\nearrow\", "↗" },
        { @"\searrow\", "↘" },
        { @"\swarrow\", "↙" },
        { @"\nleftarrow\", "↚" },
        { @"\nrightarrow\", "↛" },
        { @"\leftwavearrow\", "↜" },
        { @"\rightwavearrow\", "↝" },
        { @"\twoheadleftarrow\", "↞" },
        { @"\twoheaduparrow\", "↟" },
        { @"\twoheadrightarrow\", "↠" },
        { @"\twoheaddownarrow\", "↡" },
        { @"\leftarrowtail\", "↢" },
        { @"\rightarrowtail\", "↣" },
        { @"\mapsfrom\", "↤" },
        { @"\MapsUp\", "↥" },
        { @"\mapsto\", "↦" },
        { @"\MapsDown\", "↧" },
        { @"\updownarrowbar\", "↨" },
        { @"\hookleftarrow\", "↩" },
        { @"\hookrightarrow\", "↪" },
        { @"\looparrowleft\", "↫" },
        { @"\looparrowright\", "↬" },
        { @"\leftrightsquigarrow\", "↭" },
        { @"\nleftrightarrow\", "↮" },
        { @"\lightning\", "↯" },
        { @"\Lsh\", "↰" },
        { @"\Rsh\", "↱" },
        { @"\dlsh\", "↲" },
        { @"\drsh\", "↳" },
        { @"\linefeed\", "↴" },
        { @"\carriagereturn\", "↵" },
        { @"\curvearrowleft\", "↶" },
        { @"\curvearrowright\", "↷" },
        { @"\barovernorthwestarrow\", "↸" },
        { @"\barleftarrowrightarrowba\", "↹" },
        { @"\circlearrowleft\", "↺" },
        { @"\circlearrowright\", "↻" },
        { @"\leftharpoonup\", "↼" },
        { @"\leftharpoondown\", "↽" },
        { @"\upharpoonright\", "↾" },
        { @"\upharpoonleft\", "↿" },
        { @"\rightharpoonup\", "⇀" },
        { @"\rightharpoondown\", "⇁" },
        { @"\downharpoonright\", "⇂" },
        { @"\downharpoonleft\", "⇃" },
        { @"\rightleftarrows\", "⇄" },
        { @"\updownarrows\", "⇅" },
        { @"\leftrightarrows\", "⇆" },
        { @"\leftleftarrows\", "⇇" },
        { @"\upuparrows\", "⇈" },
        { @"\rightrightarrows\", "⇉" },
        { @"\downdownarrows\", "⇊" },
        { @"\leftrightharpoons\", "⇋" },
        { @"\rightleftharpoons\", "⇌" },
        { @"\nLeftarrow\", "⇍" },
        { @"\notimpliedby\", "⇍" },
        { @"\nLeftrightarrow\", "⇎" },
        { @"\notiff\", "⇎" },
        { @"\nRightarrow\", "⇏" },
        { @"\notimplies\", "⇏" },
        { @"\Leftarrow\", "⇐" },
        { @"\impliedby\", "⇐" },
        { @"\Uparrow\", "⇑" },
        { @"\Rightarrow\", "⇒" },
        { @"\implies\", "⇒" },
        { @"\Downarrow\", "⇓" },
        { @"\Leftrightarrow\", "⇔" },
        { @"\iff\", "⇔" },
        { @"\Updownarrow\", "⇕" },
        { @"\Nwarrow\", "⇖" },
        { @"\Nearrow\", "⇗" },
        { @"\Searrow\", "⇘" },
        { @"\Swarrow\", "⇙" },
        { @"\Lleftarrow\", "⇚" },
        { @"\Rrightarrow\", "⇛" },
        { @"\leftsquigarrow\", "⇜" },
        { @"\rightsquigarrow\", "⇝" },
        { @"\nHuparrow\", "⇞" },
        { @"\nHdownarrow\", "⇟" },
        { @"\dashleftarrow\", "⇠" },
        { @"\updasharrow\", "⇡" },
        { @"\dashrightarrow\", "⇢" },
        { @"\downdasharrow\", "⇣" },
        { @"\LeftArrowBar\", "⇤" },
        { @"\RightArrowBar\", "⇥" },
        { @"\leftwhitearrow\", "⇦" },
        { @"\upwhitearrow\", "⇧" },
        { @"\rightwhitearrow\", "⇨" },
        { @"\downwhitearrow\", "⇩" },
        { @"\whitearrowupfrombar\", "⇪" },
        { @"\whiteuparrowonpedestal\", "⇫" },
        { @"\whiteuparrowonpedestalwithhorizontalbar\", "⇬" },
        { @"\whiteuparrowonpedestalwithverticalbar\", "⇭" },
        { @"\Whiteuparrow\", "⇮" },
        { @"\Whiteuparrowonpedestal\", "⇯" },
        { @"\rightarrowfromwall\", "⇰" },
        { @"\nwarrowtocorner\", "⇱" },
        { @"\searrowtocorner\", "⇲" },
        { @"\whiteupdownarrow\", "⇳" },
        { @"\circleonrightarrow\", "⇴" },
        { @"\downuparrows\", "⇵" },
        { @"\rightthreearrows\", "⇶" },
        { @"\nvleftarrow\", "⇷" },
        { @"\pfun\", "⇸" },
        { @"\nvleftrightarrow\", "⇹" },
        { @"\nVleftarrow\", "⇺" },
        { @"\ffun\", "⇻" },
        { @"\nVleftrightarrow\", "⇼" },
        { @"\leftarrowtriangle\", "⇽" },
        { @"\rightarrowtriangle\", "⇾" },
        { @"\leftrightarrowtriangle\", "⇿" },
        { @"\forall\", "∀" },
        { @"\complement\", "∁" },
        { @"\partial\", "∂" },
        { @"\exists\", "∃" },
        { @"\nexists\", "∄" },
        { @"\varnothing\", "∅" },
        { @"\increment\", "∆" },
        { @"\nabla\", "∇" },
        { @"\in\", "∈" },
        { @"\notin\", "∉" },
        { @"\smallin\", "∊" },
        { @"\ni\", "∋" },
        { @"\nni\", "∌" },
        { @"\smallni\", "∍" },
        { @"\QED\", "∎" },
        { @"\prod\", "∏" },
        { @"\coprod\", "∐" },
        { @"\sum\", "∑" },
        { @"\mp\", "∓" },
        { @"\dotplus\", "∔" },
        { @"\slash\", "∕" },
        { @"\smallsetminus\", "∖" },
        { @"\ast\", "∗" },
        { @"\circ\", "∘" },
        { @"\sqrt\", "√" },
        { @"\sqrt[3]", "∛" },
        { @"\sqrt[4]", "∜" },
        { @"\propto\", "∝" },
        { @"\infty\", "∞" },
        { @"\rightangle\", "∟" },
        { @"\angle\", "∠" },
        { @"\measuredangle\", "∡" },
        { @"\sphericalangle\", "∢" },
        { @"\mid\", "∣" },
        { @"\nmid\", "∤" },
        { @"\parallel\", "∥" },
        { @"\nparallel\", "∦" },
        { @"\wedge\", "∧" },
        { @"\land\", "∧" },
        { @"\vee\", "∨" },
        { @"\lor\", "∨" },
        { @"\cap\", "∩" },
        { @"\intersection\", "∩" },
        { @"\cup\", "∪" },
        { @"\union\", "∪" },
        { @"\int\", "∫" },
        { @"\iint\", "∬" },
        { @"\iiint\", "∭" },
        { @"\oint\", "∮" },
        { @"\oiint\", "∯" },
        { @"\oiiint\", "∰" },
        { @"\intclockwise\", "∱" },
        { @"\varointclockwise\", "∲" },
        { @"\ointctrclockwise\", "∳" },
        { @"\therefore\", "∴" },
        { @"\because\", "∵" },
        { @"\Proportion\", "∷" },
        { @"\dotminus\", "∸" },
        { @"\eqcolon\", "∹" },
        { @"\dotsminusdots\", "∺" },
        { @"\kernelcontraction\", "∻" },
        { @"\sim\", "∼" },
        { @"\backsim\", "∽" },
        { @"\invlazys\", "∾" },
        { @"\AC\", "∿" },
        { @"\wr\", "≀" },
        { @"\nsim\", "≁" },
        { @"\eqsim\", "≂" },
        { @"\simeq\", "≃" },
        { @"\nsimeq\", "≄" },
        { @"\cong\", "≅" },
        { @"\simneqq\", "≆" },
        { @"\ncong\", "≇" },
        { @"\approx\", "≈" },
        { @"\napprox\", "≉" },
        { @"\approxeq\", "≊" },
        { @"\approxident\", "≋" },
        { @"\backcong\", "≌" },
        { @"\asymp\", "≍" },
        { @"\Bumpeq\", "≎" },
        { @"\bumpeq\", "≏" },
        { @"\doteq\", "≐" },
        { @"\Doteq\", "≑" },
        { @"\fallingdotseq\", "≒" },
        { @"\risingdotseq\", "≓" },
        { @"\coloneqq\", "≔" },
        { @"\eqqcolon\", "≕" },
        { @"\eqcirc\", "≖" },
        { @"\circeq\", "≗" },
        { @"\arceq\", "≘" },
        { @"\corresponds\", "≙" },
        { @"\veeeq\", "≚" },
        { @"\stareq\", "≛" },
        { @"\triangleq\", "≜" },
        { @"\eqdef\", "≝" },
        { @"\measeq\", "≞" },
        { @"\questeq\", "≟" },
        { @"\neq\", "≠" },
        { @"\equiv\", "≡" },
        { @"\nequiv\", "≢" },
        { @"\Equiv\", "≣" },
        { @"\leq\", "≤" },
        { @"\le\", "≤" },
        { @"\geq\", "≥" },
        { @"\ge\", "≥" },
        { @"\leqq\", "≦" },
        { @"\geqq\", "≧" },
        { @"\lneqq\", "≨" },
        { @"\gneqq\", "≩" },
        { @"\ll\", "≪" },
        { @"\gg\", "≫" },
        { @"\between\", "≬" },
        { @"\notasymp\", "≭" },
        { @"\nless\", "≮" },
        { @"\ngtr\", "≯" },
        { @"\nleq\", "≰" },
        { @"\ngeq\", "≱" },
        { @"\lesssim\", "≲" },
        { @"\gtrsim\", "≳" },
        { @"\NotLessTilde\", "≴" },
        { @"\NotGreaterTilde\", "≵" },
        { @"\lessgtr\", "≶" },
        { @"\gtrless\", "≷" },
        { @"\nlessgtr\", "≸" },
        { @"\NotGreaterLess\", "≹" },
        { @"\prec\", "≺" },
        { @"\succ\", "≻" },
        { @"\preccurlyeq\", "≼" },
        { @"\succcurlyeq\", "≽" },
        { @"\precsim\", "≾" },
        { @"\succsim\", "≿" },
        { @"\nprec\", "⊀" },
        { @"\nsucc\", "⊁" },
        { @"\subset\", "⊂" },
        { @"\supset\", "⊃" },
        { @"\nsubset\", "⊄" },
        { @"\nsupset\", "⊅" },
        { @"\subseteq\", "⊆" },
        { @"\supseteq\", "⊇" },
        { @"\nsubseteq\", "⊈" },
        { @"\nsupseteq\", "⊉" },
        { @"\subsetneq\", "⊊" },
        { @"\supsetneq\", "⊋" },
        { @"\cupleftarrow\", "⊌" },
        { @"\cupdot\", "⊍" },
        { @"\uplus\", "⊎" },
        { @"\sqsubset\", "⊏" },
        { @"\sqsupset\", "⊐" },
        { @"\sqsubseteq\", "⊑" },
        { @"\sqsupseteq\", "⊒" },
        { @"\sqcap\", "⊓" },
        { @"\sqcup\", "⊔" },
        { @"\oplus\", "⊕" },
        { @"\ominus\", "⊖" },
        { @"\otimes\", "⊗" },
        { @"\oslash\", "⊘" },
        { @"\odot\", "⊙" },
        { @"\circledcirc\", "⊚" },
        { @"\circledast\", "⊛" },
        { @"\circledequal\", "⊜" },
        { @"\circleddash\", "⊝" },
        { @"\boxplus\", "⊞" },
        { @"\boxminus\", "⊟" },
        { @"\boxtimes\", "⊠" },
        { @"\boxdot\", "⊡" },
        { @"\vdash\", "⊢" },
        { @"\dashv\", "⊣" },
        { @"\top\", "⊤" },
        { @"\bot\", "⊥" },
        { @"\assert\", "⊦" },
        { @"\models\", "⊧" },
        { @"\vDash\", "⊨" },
        { @"\Vdash\", "⊩" },
        { @"\Vvdash\", "⊪" },
        { @"\VDash\", "⊫" },
        { @"\nvdash\", "⊬" },
        { @"\nvDash\", "⊭" },
        { @"\nVdash\", "⊮" },
        { @"\nVDash\", "⊯" },
        { @"\prurel\", "⊰" },
        { @"\scurel\", "⊱" },
        { @"\vartriangleleft\", "⊲" },
        { @"\vartriangleright\", "⊳" },
        { @"\trianglelefteq\", "⊴" },
        { @"\trianglerighteq\", "⊵" },
        { @"\multimapdotbothA\", "⊶" },
        { @"\multimapdotbothB\", "⊷" },
        { @"\multimap\", "⊸" },
        { @"\hermitmatrix\", "⊹" },
        { @"\intercal\", "⊺" },
        { @"\veebar\", "⊻" },
        { @"\barwedge\", "⊼" },
        { @"\barvee\", "⊽" },
        { @"\measuredrightangle\", "⊾" },
        { @"\varlrtriangle\", "⊿" },
        { @"\bigwedge\", "⋀" },
        { @"\bigvee\", "⋁" },
        { @"\bigcap\", "⋂" },
        { @"\bigcup\", "⋃" },
        { @"\diamond\", "⋄" },
        { @"\cdot\", "⋅" },
        { @"\star\", "⋆" },
        { @"\divideontimes\", "⋇" },
        { @"\bowtie\", "⋈" },
        { @"\ltimes\", "⋉" },
        { @"\rtimes\", "⋊" },
        { @"\leftthreetimes\", "⋋" },
        { @"\rightthreetimes\", "⋌" },
        { @"\backsimeq\", "⋍" },
        { @"\curlyvee\", "⋎" },
        { @"\curlywedge\", "⋏" },
        { @"\Subset\", "⋐" },
        { @"\Supset\", "⋑" },
        { @"\Cap\", "⋒" },
        { @"\Cup\", "⋓" },
        { @"\pitchfork\", "⋔" },
        { @"\hash\", "⋕" },
        { @"\lessdot\", "⋖" },
        { @"\gtrdot\", "⋗" },
        { @"\lll\", "⋘" },
        { @"\ggg\", "⋙" },
        { @"\lesseqgtr\", "⋚" },
        { @"\gtreqless\", "⋛" },
        { @"\eqless\", "⋜" },
        { @"\eqgtr\", "⋝" },
        { @"\curlyeqprec\", "⋞" },
        { @"\curlyeqsucc\", "⋟" },
        { @"\npreceq\", "⋠" },
        { @"\nsucceq\", "⋡" },
        { @"\nsqsubseteq\", "⋢" },
        { @"\nsqsupseteq\", "⋣" },
        { @"\sqsubsetneq\", "⋤" },
        { @"\sqsupsetneq\", "⋥" },
        { @"\lnsim\", "⋦" },
        { @"\gnsim\", "⋧" },
        { @"\precnsim\", "⋨" },
        { @"\succnsim\", "⋩" },
        { @"\ntriangleleft\", "⋪" },
        { @"\ntriangleright\", "⋫" },
        { @"\ntrianglelefteq\", "⋬" },
        { @"\ntrianglerighteq\", "⋭" },
        { @"\vdots\", "⋮" },
        { @"\cdots\", "⋯" },
        { @"\iddots\", "⋰" },
        { @"\ddots\", "⋱" },
        { @"\disin\", "⋲" },
        { @"\varisins\", "⋳" },
        { @"\isins\", "⋴" },
        { @"\isindot\", "⋵" },
        { @"\barin\", "⋶" },
        { @"\isinobar\", "⋷" },
        { @"\isinvb\", "⋸" },
        { @"\isinE\", "⋹" },
        { @"\nisd\", "⋺" },
        { @"\varnis\", "⋻" },
        { @"\nis\", "⋼" },
        { @"\varniobar\", "⋽" },
        { @"\niobar\", "⋾" },
        { @"\bagmember\", "⋿" },
        { @"\diameter\", "⌀" },
        { @"\house\", "⌂" },
        { @"\varbarwedge\", "⌅" },
        { @"\vardoublebarwedge\", "⌆" },
        { @"\lceil\", "⌈" },
        { @"\rceil\", "⌉" },
        { @"\lfloor\", "⌊" },
        { @"\rfloor\", "⌋" },
        { @"\invneg\", "⌐" },
        { @"\wasylozenge\", "⌑" },
        { @"\profline\", "⌒" },
        { @"\profsurf\", "⌓" },
        { @"\viewdata\", "⌗" },
        { @"\turnednot\", "⌙" },
        { @"\ulcorner\", "⌜" },
        { @"\urcorner\", "⌝" },
        { @"\llcorner\", "⌞" },
        { @"\lrcorner\", "⌟" },
        { @"\inttop\", "⌠" },
        { @"\intbottom\", "⌡" },
        { @"\frown\", "⌢" },
        { @"\smile\", "⌣" },
        { @"\varhexagonlrbonds\", "⌬" },
        { @"\conictaper\", "⌲" },
        { @"\topbot\", "⌶" },
        // ⌷                       \APL FUNCTIONAL SYMBOL SQUISH QUAD
        // ⌸                       \APL FUNCTIONAL SYMBOL QUAD EQUAL
        { @"\APLinv\", "⌹" },
        // ⌺                       \APL FUNCTIONAL SYMBOL QUAD DIAMOND
        // ⌻                       \APL FUNCTIONAL SYMBOL QUAD JOT
        { @"\APLcirc{\APLbox}", "⌼" },
        { @"\obar\", "⌽" },
        { @"\APLcirc{\Circle}", "⌾" },
        { @"\notslash\", "⌿" },
        { @"\notbackslash\", "⍀" },
        // ⍁                       \APL FUNCTIONAL SYMBOL QUAD SLASH
        // ⍂                       \APL FUNCTIONAL SYMBOL QUAD BACKSLASH
        // ⍃                       \APL FUNCTIONAL SYMBOL QUAD LESS-THAN
        // ⍄                       \APL FUNCTIONAL SYMBOL QUAD GREATER-THAN
        // ⍅                       \APL FUNCTIONAL SYMBOL LEFTWARDS VANE
        // ⍆                       \APL FUNCTIONAL SYMBOL RIGHTWARDS VANE
        { @"\APLleftarrowbox", "⍇" },
        { @"\APLrightarrowbox", "⍈" },
        { @"\invdiameter", "⍉" },
        // ⍊                       \APL FUNCTIONAL SYMBOL DOWN TACK UNDERBAR
        // ⍋                       # \APLvert{\APLup} (wasysym), APL FUNCTIONAL SYMBOL DELTA STILE
        // ⍌                       \APL FUNCTIONAL SYMBOL QUAD DOWN CARET
        // ⍍                       \APL FUNCTIONAL SYMBOL QUAD DELTA
        // ⍎                       \APL FUNCTIONAL SYMBOL DOWN TACK JOT
        // ⍏                       \APL FUNCTIONAL SYMBOL UPWARDS VANE
        { @"\APLuparrowbox", "⍐" },
        // ⍑                       \APL FUNCTIONAL SYMBOL UP TACK OVERBAR
        // ⍒                       # \APLvert{\APLdown} (wasysym), APL FUNCTIONAL SYMBOL DEL STILE
        { @"\APLboxupcaret", "⍓" },
        // ⍔                       \APL FUNCTIONAL SYMBOL QUAD DEL
        // ⍕                       \APL FUNCTIONAL SYMBOL UP TACK JOT
        // ⍖                       \APL FUNCTIONAL SYMBOL DOWNWARDS VANE
        { @"\APLdownarrowbox", "⍗" },
        // ⍘                       \APL FUNCTIONAL SYMBOL QUOTE UNDERBAR
        // ⍙                       \APL FUNCTIONAL SYMBOL DELTA UNDERBAR
        // ⍚                       \APL FUNCTIONAL SYMBOL DIAMOND UNDERBAR
        // ⍛                       \APL FUNCTIONAL SYMBOL JOT UNDERBAR
        // ⍜                       \APL FUNCTIONAL SYMBOL CIRCLE UNDERBAR
        { @"\APLcomment", "⍝" },
        { @"\APLinput", "⍞" },
        { @"\APLlog", "⍟" },
        // ⍠                       \APL FUNCTIONAL SYMBOL QUAD COLON
        // ⍡                       \APL FUNCTIONAL SYMBOL UP TACK DIAERESIS
        // ⍢                       \APL FUNCTIONAL SYMBOL DEL DIAERESIS
        // ⍣                       \APL FUNCTIONAL SYMBOL STAR DIAERESIS
        // ⍤                       \APL FUNCTIONAL SYMBOL JOT DIAERESIS
        // ⍥                       \APL FUNCTIONAL SYMBOL CIRCLE DIAERESIS
        // ⍦                       \APL FUNCTIONAL SYMBOL DOWN SHOE STILE
        // ⍧                       \APL FUNCTIONAL SYMBOL LEFT SHOE STILE
        // ⍨                       \APL FUNCTIONAL SYMBOL TILDE DIAERESIS
        // ⍩                       \APL FUNCTIONAL SYMBOL GREATER-THAN DIAERESIS
        // ⍪                       \APL FUNCTIONAL SYMBOL COMMA BAR
        // ⍫                       # \APLnot{\APLdown} (wasysym), APL FUNCTIONAL SYMBOL DEL TILDE
        // ⍬                       \APL FUNCTIONAL SYMBOL ZILDE
        // ⍭                       \APL FUNCTIONAL SYMBOL STILE TILDE
        // ⍮                       \APL FUNCTIONAL SYMBOL SEMICOLON UNDERBAR
        // ⍯                       \APL FUNCTIONAL SYMBOL QUAD NOT EQUAL
        { @"\APLboxquestion", "⍰" },
        // ⍱                       \APL FUNCTIONAL SYMBOL DOWN CARET TILDE
        // ⍲                       \APL FUNCTIONAL SYMBOL UP CARET TILDE
        // ⍳                       \APL FUNCTIONAL SYMBOL IOTA
        // ⍴                       \APL FUNCTIONAL SYMBOL RHO
        // ⍵                       \APL FUNCTIONAL SYMBOL OMEGA
        // ⍶                       \APL FUNCTIONAL SYMBOL ALPHA UNDERBAR
        // ⍷                       \APL FUNCTIONAL SYMBOL EPSILON UNDERBAR
        // ⍸                       \APL FUNCTIONAL SYMBOL IOTA UNDERBAR
        // ⍹                       \APL FUNCTIONAL SYMBOL OMEGA UNDERBAR
        { @"\rangledownzigzagarrow\", "⍼" },
        { @"\hexagon\", "⎔" },
        { @"\lparenuend\", "⎛" },
        { @"\lparenextender\", "⎜" },
        { @"\lparenlend\", "⎝" },
        { @"\rparenuend\", "⎞" },
        { @"\rparenextender\", "⎟" },
        { @"\rparenlend\", "⎠" },
        { @"\lbrackuend\", "⎡" },
        { @"\lbrackextender\", "⎢" },
        { @"\lbracklend\", "⎣" },
        { @"\rbrackuend\", "⎤" },
        { @"\rbrackextender\", "⎥" },
        { @"\rbracklend\", "⎦" },
        { @"\lbraceuend\", "⎧" },
        { @"\lbracemid\", "⎨" },
        { @"\lbracelend\", "⎩" },
        { @"\vbraceextender\", "⎪" },
        { @"\rbraceuend\", "⎫" },
        { @"\rbracemid\", "⎬" },
        { @"\rbracelend\", "⎭" },
        { @"\intextender\", "⎮" },
        { @"\harrowextender\", "⎯" },
        { @"\lmoustache\", "⎰" },
        { @"\rmoustache\", "⎱" },
        { @"\sumtop\", "⎲" },
        { @"\sumbottom\", "⎳" },
        { @"\overbracket\", "⎴" },
        { @"\underbracket\", "⎵" },
        { @"\bbrktbrk\", "⎶" },
        { @"\sqrtbottom\", "⎷" },
        { @"\lvboxline\", "⎸" },
        { @"\rvboxline\", "⎹" },
        { @"\varcarriagereturn\", "⏎" },
        { @"\overparen\", "⏜" },
        { @"\underparen\", "⏝" },
        { @"\overbrace\", "⏞" },
        { @"\underbrace\", "⏟" },
        { @"\obrbrak\", "⏠" },
        { @"\ubrbrak\", "⏡" },
        { @"\trapezium\", "⏢" },
        { @"\benzenr\", "⏣" },
        { @"\strns\", "⏤" },
        { @"\fltns\", "⏥" },
        { @"\accurrent\", "⏦" },
        { @"\elinters\", "⏧" },
        { @"\oS\", "Ⓢ" },
        { @"\bdtriplevdash\", "┆" },
        { @"\blockuphalf\", "▀" },
        { @"\blocklowhalf\", "▄" },
        { @"\blockfull\", "█" },
        { @"\blocklefthalf\", "▌" },
        { @"\blockrighthalf\", "▐" },
        { @"\blockqtrshaded\", "░" },
        { @"\blockhalfshaded\", "▒" },
        { @"\blockthreeqtrshaded\", "▓" },
        { @"\mdlgblksquare\", "■" },
        { @"\mdlgwhtsquare\", "□" },
        { @"\squoval\", "▢" },
        { @"\blackinwhitesquare\", "▣" },
        { @"\squarehfill\", "▤" },
        { @"\squarevfill\", "▥" },
        { @"\squarehvfill\", "▦" },
        { @"\squarenwsefill\", "▧" },
        { @"\squareneswfill\", "▨" },
        { @"\squarecrossfill\", "▩" },
        { @"\smblksquare\", "▪" },
        { @"\smwhtsquare\", "▫" },
        { @"\hrectangleblack\", "▬" },
        { @"\hrectangle\", "▭" },
        { @"\vrectangleblack\", "▮" },
        { @"\vrectangle\", "▯" },
        { @"\parallelogramblack\", "▰" },
        { @"\parallelogram\", "▱" },
        { @"\bigblacktriangleup\", "▲" },
        { @"\bigtriangleup\", "△" },
        { @"\blacktriangleup\", "▴" },
        { @"\smalltriangleup\", "▵" },
        { @"\RHD\", "▶" },
        { @"\rhd\", "▷" },
        { @"\blacktriangleright\", "▸" },
        { @"\smalltriangleright\", "▹" },
        { @"\blackpointerright\", "►" },
        { @"\whitepointerright\", "▻" },
        { @"\bigblacktriangledown\", "▼" },
        { @"\bigtriangledown\", "▽" },
        { @"\blacktriangledown\", "▾" },
        { @"\smalltriangledown\", "▿" },
        { @"\LHD\", "◀" },
        { @"\lhd\", "◁" },
        { @"\blacktriangleleft\", "◂" },
        { @"\smalltriangleleft\", "◃" },
        { @"\blackpointerleft\", "◄" },
        { @"\whitepointerleft\", "◅" },
        { @"\Diamondblack\", "◆" },
        { @"\Diamond\", "◇" },
        { @"\blackinwhitediamond\", "◈" },
        { @"\fisheye\", "◉" },
        { @"\lozenge\", "◊" },
        { @"\Circle\", "○" },
        { @"\dottedcircle\", "◌" },
        { @"\circlevertfill\", "◍" },
        { @"\bullseye\", "◎" },
        { @"\CIRCLE\", "●" },
        { @"\LEFTcircle\", "◐" },
        { @"\RIGHTcircle\", "◑" },
        { @"\circlebottomhalfblack\", "◒" },
        { @"\circletophalfblack\", "◓" },
        { @"\circleurquadblack\", "◔" },
        { @"\blackcircleulquadwhite\", "◕" },
        { @"\LEFTCIRCLE\", "◖" },
        { @"\RIGHTCIRCLE\", "◗" },
        { @"\inversebullet\", "◘" },
        { @"\inversewhitecircle\", "◙" },
        { @"\invwhiteupperhalfcircle\", "◚" },
        { @"\invwhitelowerhalfcircle\", "◛" },
        { @"\ularc\", "◜" },
        { @"\urarc\", "◝" },
        { @"\lrarc\", "◞" },
        { @"\llarc\", "◟" },
        { @"\topsemicircle\", "◠" },
        { @"\botsemicircle\", "◡" },
        { @"\lrblacktriangle\", "◢" },
        { @"\llblacktriangle\", "◣" },
        { @"\ulblacktriangle\", "◤" },
        { @"\urblacktriangle\", "◥" },
        { @"\smwhtcircle\", "◦" },
        { @"\squareleftblack\", "◧" },
        { @"\squarerightblack\", "◨" },
        { @"\squareulblack\", "◩" },
        { @"\squarelrblack\", "◪" },
        { @"\boxbar\", "◫" },
        { @"\trianglecdot\", "◬" },
        { @"\triangleleftblack\", "◭" },
        { @"\trianglerightblack\", "◮" },
        { @"\lgwhtcircle\", "◯" },
        { @"\squareulquad\", "◰" },
        { @"\squarellquad\", "◱" },
        { @"\squarelrquad\", "◲" },
        { @"\squareurquad\", "◳" },
        { @"\circleulquad\", "◴" },
        { @"\circlellquad\", "◵" },
        { @"\circlelrquad\", "◶" },
        { @"\circleurquad\", "◷" },
        { @"\ultriangle\", "◸" },
        { @"\urtriangle\", "◹" },
        { @"\lltriangle\", "◺" },
        //{ @"\square\", "◻" },
        //{ @"\blacksquare\", "◼" },
        { @"\mdsmwhtsquare\", "◽" },
        { @"\mdsmblksquare\", "◾" },
        { @"\lrtriangle\", "◿" },
        { @"\bigstar\", "★" },
        { @"\bigwhitestar\", "☆" },
        { @"\Sun\", "☉" },
        { @"\conjunction\", "☌" },
        { @"\Square\", "☐" },
        { @"\CheckedBox\", "☑" },
        { @"\XBox\", "☒" },
        { @"\steaming\", "☕" },
        { @"\pointright\", "☞" },
        { @"\skull\", "☠" },
        { @"\danger\", "☡" },
        { @"\radiation\", "☢" },
        { @"\biohazard\", "☣" },
        { @"\yinyang\", "☯" },
        { @"\frownie\", "☹" },
        { @"\smiley\", "☺" },
        { @"\blacksmiley\", "☻" },
        { @"\sun\", "☼" },
        { @"\rightmoon\", "☽" },
        { @"\leftmoon\", "☾" },
        { @"\mercury\", "☿" },
        { @"\female\", "♀" },
        { @"\earth\", "♁" },
        { @"\male\", "♂" },
        { @"\jupiter\", "♃" },
        { @"\saturn\", "♄" },
        { @"\uranus\", "♅" },
        { @"\neptune\", "♆" },
        { @"\pluto\", "♇" },
        { @"\aries\", "♈" },
        { @"\taurus\", "♉" },
        { @"\gemini\", "♊" },
        { @"\cancer\", "♋" },
        { @"\leo\", "♌" },
        { @"\virgo\", "♍" },
        { @"\libra\", "♎" },
        { @"\scorpio\", "♏" },
        { @"\sagittarius\", "♐" },
        { @"\capricornus\", "♑" },
        { @"\aquarius\", "♒" },
        { @"\pisces\", "♓" },
        { @"\spadesuit\", "♠" },
        { @"\heartsuit\", "♡" },
        { @"\diamondsuit\", "♢" },
        { @"\clubsuit\", "♣" },
        { @"\varspadesuit\", "♤" },
        { @"\varheartsuit\", "♥" },
        { @"\vardiamondsuit\", "♦" },
        { @"\varclubsuit\", "♧" },
        { @"\quarternote\", "♩" },
        { @"\eighthnote\", "♪" },
        { @"\twonotes\", "♫" },
        { @"\sixteenthnote\", "♬" },
        { @"\flat\", "♭" },
        { @"\natural\", "♮" },
        { @"\sharp\", "♯" },
        { @"\recycle\", "♻" },
        { @"\acidfree\", "♾" },
        { @"\dicei\", "⚀" },
        { @"\diceii\", "⚁" },
        { @"\diceiii\", "⚂" },
        { @"\diceiv\", "⚃" },
        { @"\dicev\", "⚄" },
        { @"\dicevi\", "⚅" },
        { @"\circledrightdot\", "⚆" },
        { @"\circledtwodots\", "⚇" },
        { @"\blackcircledrightdot\", "⚈" },
        { @"\blackcircledtwodots\", "⚉" },
        { @"\anchor\", "⚓" },
        { @"\swords\", "⚔" },
        { @"\warning\", "⚠" },
        { @"\Hermaphrodite\", "⚥" },
        { @"\medcirc\", "⚪" },
        { @"\medbullet\", "⚫" },
        { @"\mdsmwhtcircle\", "⚬" },
        { @"\neuter\", "⚲" },
        { @"\pencil\", "✎" },
        { @"\checkmark\", "✓" },
        { @"\ballotx\", "✗" },
        { @"\maltese\", "✠" },
        { @"\circledstar\", "✪" },
        { @"\varstar\", "✶" },
        { @"\dingasterisk\", "✽" },
        { @"\lbrbrak\", "❲" },
        { @"\rbrbrak\", "❳" },
        { @"\draftingarrow\", "➛" },
        { @"\arrowbullet\", "➢" },
        { @"\threedangle\", "⟀" },
        { @"\whiteinwhitetriangle\", "⟁" },
        { @"\perp\", "⟂" },
        { @"\subsetcirc\", "⟃" },
        { @"\supsetcirc\", "⟄" },
        { @"\Lbag\", "⟅" },
        { @"\Rbag\", "⟆" },
        { @"\veedot\", "⟇" },
        { @"\bsolhsub\", "⟈" },
        { @"\suphsol\", "⟉" },
        { @"\longdivision\", "⟌" },
        { @"\Diamonddot\", "⟐" },
        { @"\wedgedot\", "⟑" },
        { @"\upin\", "⟒" },
        { @"\pullback\", "⟓" },
        { @"\pushout\", "⟔" },
        { @"\leftouterjoin\", "⟕" },
        { @"\rightouterjoin\", "⟖" },
        { @"\fullouterjoin\", "⟗" },
        { @"\bigbot\", "⟘" },
        { @"\bigtop\", "⟙" },
        { @"\DashVDash\", "⟚" },
        { @"\dashVdash\", "⟛" },
        { @"\multimapinv\", "⟜" },
        { @"\vlongdash\", "⟝" },
        { @"\longdashv\", "⟞" },
        { @"\cirbot\", "⟟" },
        { @"\lozengeminus\", "⟠" },
        { @"\concavediamond\", "⟡" },
        { @"\concavediamondtickleft\", "⟢" },
        { @"\concavediamondtickright\", "⟣" },
        { @"\whitesquaretickleft\", "⟤" },
        { @"\whitesquaretickright\", "⟥" },
        { @"\llbracket\", "⟦" },
        { @"\rrbracket\", "⟧" },
        { @"\langle\", "⟨" },
        { @"\rangle\", "⟩" },
        { @"\lang\", "⟪" },
        { @"\rang\", "⟫" },
        { @"\Lbrbrak\", "⟬" },
        { @"\Rbrbrak\", "⟭" },
        { @"\lgroup\", "⟮" },
        { @"\rgroup\", "⟯" },
        { @"\UUparrow\", "⟰" },
        { @"\DDownarrow\", "⟱" },
        { @"\acwgapcirclearrow\", "⟲" },
        { @"\cwgapcirclearrow\", "⟳" },
        { @"\rightarrowonoplus\", "⟴" },
        { @"\longleftarrow\", "⟵" },
        { @"\longrightarrow\", "⟶" },
        { @"\longleftrightarrow\", "⟷" },
        { @"\Longleftarrow\", "⟸" },
        { @"\Longrightarrow\", "⟹" },
        { @"\Longleftrightarrow\", "⟺" },
        { @"\longmapsfrom\", "⟻" },
        { @"\longmapsto\", "⟼" },
        { @"\Longmapsfrom\", "⟽" },
        { @"\Longmapsto\", "⟾" },
        { @"\longrightsquigarrow\", "⟿" },
        { @"\psur\", "⤀" },
        { @"\nVtwoheadrightarrow\", "⤁" },
        { @"\nvLeftarrow\", "⤂" },
        { @"\nvRightarrow\", "⤃" },
        { @"\nvLeftrightarrow\", "⤄" },
        { @"\twoheadmapsto\", "⤅" },
        { @"\Mapsfrom\", "⤆" },
        { @"\Mapsto\", "⤇" },
        { @"\downarrowbarred\", "⤈" },
        { @"\uparrowbarred\", "⤉" },
        { @"\Uuparrow\", "⤊" },
        { @"\Ddownarrow\", "⤋" },
        { @"\leftbkarrow\", "⤌" },
        { @"\rightbkarrow\", "⤍" },
        { @"\leftdbkarrow\", "⤎" },
        { @"\dbkarow\", "⤏" },
        { @"\drbkarow\", "⤐" },
        { @"\rightdotarrow\", "⤑" },
        { @"\UpArrowBar\", "⤒" },
        { @"\DownArrowBar\", "⤓" },
        { @"\pinj\", "⤔" },
        { @"\finj\", "⤕" },
        { @"\bij\", "⤖" },
        { @"\nvtwoheadrightarrowtail\", "⤗" },
        { @"\nVtwoheadrightarrowtail\", "⤘" },
        { @"\lefttail\", "⤙" },
        { @"\righttail\", "⤚" },
        { @"\leftdbltail\", "⤛" },
        { @"\rightdbltail\", "⤜" },
        { @"\diamondleftarrow\", "⤝" },
        { @"\rightarrowdiamond\", "⤞" },
        { @"\diamondleftarrowbar\", "⤟" },
        { @"\barrightarrowdiamond\", "⤠" },
        { @"\nwsearrow\", "⤡" },
        { @"\neswarrow\", "⤢" },
        { @"\hknwarrow\", "⤣" },
        { @"\hknearrow\", "⤤" },
        { @"\hksearow\", "⤥" },
        { @"\hkswarow\", "⤦" },
        { @"\tona\", "⤧" },
        { @"\toea\", "⤨" },
        { @"\tosa\", "⤩" },
        { @"\towa\", "⤪" },
        { @"\rdiagovfdiag\", "⤫" },
        { @"\fdiagovrdiag\", "⤬" },
        { @"\seovnearrow\", "⤭" },
        { @"\neovsearrow\", "⤮" },
        { @"\fdiagovnearrow\", "⤯" },
        { @"\rdiagovsearrow\", "⤰" },
        { @"\neovnwarrow\", "⤱" },
        { @"\nwovnearrow\", "⤲" },
        { @"\leadsto\", "⤳" },
        { @"\uprightcurvearrow\", "⤴" },
        { @"\downrightcurvedarrow\", "⤵" },
        { @"\leftdowncurvedarrow\", "⤶" },
        { @"\rightdowncurvedarrow\", "⤷" },
        { @"\cwrightarcarrow\", "⤸" },
        { @"\acwleftarcarrow\", "⤹" },
        { @"\acwoverarcarrow\", "⤺" },
        { @"\acwunderarcarrow\", "⤻" },
        { @"\curvearrowrightminus\", "⤼" },
        { @"\curvearrowleftplus\", "⤽" },
        { @"\cwundercurvearrow\", "⤾" },
        { @"\ccwundercurvearrow\", "⤿" },
        { @"\acwcirclearrow\", "⥀" },
        { @"\cwcirclearrow\", "⥁" },
        { @"\rightarrowshortleftarrow\", "⥂" },
        { @"\leftarrowshortrightarrow\", "⥃" },
        { @"\shortrightarrowleftarrow\", "⥄" },
        { @"\rightarrowplus\", "⥅" },
        { @"\leftarrowplus\", "⥆" },
        { @"\rightarrowx\", "⥇" },
        { @"\leftrightarrowcircle\", "⥈" },
        { @"\twoheaduparrowcircle\", "⥉" },
        { @"\leftrightharpoon\", "⥊" },
        { @"\rightleftharpoon\", "⥋" },
        { @"\updownharpoonrightleft\", "⥌" },
        { @"\updownharpoonleftright\", "⥍" },
        { @"\leftrightharpoonup\", "⥎" },
        { @"\rightupdownharpoon\", "⥏" },
        { @"\leftrightharpoondown\", "⥐" },
        { @"\leftupdownharpoon\", "⥑" },
        { @"\LeftVectorBar\", "⥒" },
        { @"\RightVectorBar\", "⥓" },
        { @"\RightUpVectorBar\", "⥔" },
        { @"\RightDownVectorBar\", "⥕" },
        { @"\DownLeftVectorBar\", "⥖" },
        { @"\DownRightVectorBar\", "⥗" },
        { @"\LeftUpVectorBar\", "⥘" },
        { @"\LeftDownVectorBar\", "⥙" },
        { @"\LeftTeeVector\", "⥚" },
        { @"\RightTeeVector\", "⥛" },
        { @"\RightUpTeeVector\", "⥜" },
        { @"\RightDownTeeVector\", "⥝" },
        { @"\DownLeftTeeVector\", "⥞" },
        { @"\DownRightTeeVector\", "⥟" },
        { @"\LeftUpTeeVector\", "⥠" },
        { @"\LeftDownTeeVector\", "⥡" },
        { @"\leftleftharpoons\", "⥢" },
        { @"\upupharpoons\", "⥣" },
        { @"\rightrightharpoons\", "⥤" },
        { @"\downdownharpoons\", "⥥" },
        { @"\leftrightharpoonsup\", "⥦" },
        { @"\leftrightharpoonsdown\", "⥧" },
        { @"\rightleftharpoonsup\", "⥨" },
        { @"\rightleftharpoonsdown\", "⥩" },
        { @"\leftbarharpoon\", "⥪" },
        { @"\barleftharpoon\", "⥫" },
        { @"\rightbarharpoon\", "⥬" },
        { @"\barrightharpoon\", "⥭" },
        { @"\updownharpoons\", "⥮" },
        { @"\downupharpoons\", "⥯" },
        { @"\rightimply\", "⥰" },
        { @"\equalrightarrow\", "⥱" },
        { @"\similarrightarrow\", "⥲" },
        { @"\leftarrowsimilar\", "⥳" },
        { @"\rightarrowsimilar\", "⥴" },
        { @"\rightarrowapprox\", "⥵" },
        { @"\ltlarr\", "⥶" },
        { @"\leftarrowless\", "⥷" },
        { @"\gtrarr\", "⥸" },
        { @"\subrarr\", "⥹" },
        { @"\leftarrowsubset\", "⥺" },
        { @"\suplarr\", "⥻" },
        { @"\strictfi\", "⥼" },
        { @"\strictif\", "⥽" },
        { @"\upfishtail\", "⥾" },
        { @"\downfishtail\", "⥿" },
        { @"\VERT\", "⦀" },
        { @"\spot\", "⦁" },
        { @"\typecolon\", "⦂" },
        { @"\lBrace\", "⦃" },
        { @"\rBrace\", "⦄" },
        { @"\Lparen\", "⦅" },
        { @"\Rparen\", "⦆" },
        { @"\limg\", "⦇" },
        { @"\rimg\", "⦈" },
        { @"\lblot\", "⦉" },
        { @"\rblot\", "⦊" },
        { @"\lbrackubar\", "⦋" },
        { @"\rbrackubar\", "⦌" },
        { @"\lbrackultick\", "⦍" },
        { @"\rbracklrtick\", "⦎" },
        { @"\lbracklltick\", "⦏" },
        { @"\rbrackurtick\", "⦐" },
        { @"\langledot\", "⦑" },
        { @"\rangledot\", "⦒" },
        { @"\lparenless\", "⦓" },
        { @"\rparengtr\", "⦔" },
        { @"\Lparengtr\", "⦕" },
        { @"\Rparenless\", "⦖" },
        { @"\lblkbrbrak\", "⦗" },
        { @"\rblkbrbrak\", "⦘" },
        { @"\fourvdots\", "⦙" },
        { @"\vzigzag\", "⦚" },
        { @"\measuredangleleft\", "⦛" },
        { @"\rightanglesqr\", "⦜" },
        { @"\rightanglemdot\", "⦝" },
        { @"\angles\", "⦞" },
        { @"\angdnr\", "⦟" },
        { @"\gtlpar\", "⦠" },
        { @"\sphericalangleup\", "⦡" },
        { @"\turnangle\", "⦢" },
        { @"\revangle\", "⦣" },
        { @"\angleubar\", "⦤" },
        { @"\revangleubar\", "⦥" },
        { @"\wideangledown\", "⦦" },
        { @"\wideangleup\", "⦧" },
        { @"\measanglerutone\", "⦨" },
        { @"\measanglelutonw\", "⦩" },
        { @"\measanglerdtose\", "⦪" },
        { @"\measangleldtosw\", "⦫" },
        { @"\measangleurtone\", "⦬" },
        { @"\measangleultonw\", "⦭" },
        { @"\measangledrtose\", "⦮" },
        { @"\measangledltosw\", "⦯" },
        { @"\revemptyset\", "⦰" },
        { @"\emptysetobar\", "⦱" },
        { @"\emptysetocirc\", "⦲" },
        { @"\emptysetoarr\", "⦳" },
        { @"\emptysetoarrl\", "⦴" },
        { @"\circlehbar\", "⦵" },
        { @"\circledvert\", "⦶" },
        { @"\circledparallel\", "⦷" },
        { @"\circledbslash\", "⦸" },
        { @"\operp\", "⦹" },
        { @"\obot\", "⦺" },
        { @"\olcross\", "⦻" },
        { @"\odotslashdot\", "⦼" },
        { @"\uparrowoncircle\", "⦽" },
        { @"\circledwhitebullet\", "⦾" },
        { @"\circledbullet\", "⦿" },
        { @"\circledless\", "⧀" },
        { @"\circledgtr\", "⧁" },
        { @"\cirscir\", "⧂" },
        { @"\cirE\", "⧃" },
        { @"\boxslash\", "⧄" },
        { @"\boxbslash\", "⧅" },
        { @"\boxast\", "⧆" },
        { @"\boxcircle\", "⧇" },
        { @"\boxbox\", "⧈" },
        { @"\boxonbox\", "⧉" },
        { @"\triangleodot\", "⧊" },
        { @"\triangleubar\", "⧋" },
        { @"\triangles\", "⧌" },
        { @"\triangleserifs\", "⧍" },
        { @"\rtriltri\", "⧎" },
        { @"\LeftTriangleBar\", "⧏" },
        { @"\RightTriangleBar\", "⧐" },
        { @"\lfbowtie\", "⧑" },
        { @"\rfbowtie\", "⧒" },
        { @"\fbowtie\", "⧓" },
        { @"\lftimes\", "⧔" },
        { @"\rftimes\", "⧕" },
        { @"\hourglass\", "⧖" },
        { @"\blackhourglass\", "⧗" },
        { @"\lvzigzag\", "⧘" },
        { @"\rvzigzag\", "⧙" },
        { @"\Lvzigzag\", "⧚" },
        { @"\Rvzigzag\", "⧛" },
        { @"\iinfin\", "⧜" },
        { @"\tieinfty\", "⧝" },
        { @"\nvinfty\", "⧞" },
        { @"\multimapboth\", "⧟" },
        { @"\laplac\", "⧠" },
        { @"\lrtriangleeq\", "⧡" },
        { @"\shuffle\", "⧢" },
        { @"\eparsl\", "⧣" },
        { @"\smeparsl\", "⧤" },
        { @"\eqvparsl\", "⧥" },
        { @"\gleichstark\", "⧦" },
        { @"\thermod\", "⧧" },
        { @"\downtriangleleftblack\", "⧨" },
        { @"\downtrianglerightblack\", "⧩" },
        { @"\blackdiamonddownarrow\", "⧪" },
        { @"\blacklozenge\", "⧫" },
        { @"\circledownarrow\", "⧬" },
        { @"\blackcircledownarrow\", "⧭" },
        { @"\errbarsquare\", "⧮" },
        { @"\errbarblacksquare\", "⧯" },
        { @"\errbardiamond\", "⧰" },
        { @"\errbarblackdiamond\", "⧱" },
        { @"\errbarcircle\", "⧲" },
        { @"\errbarblackcircle\", "⧳" },
        { @"\ruledelayed\", "⧴" },
        { @"\setminus\", "⧵" },
        { @"\dsol\", "⧶" },
        { @"\rsolbar\", "⧷" },
        { @"\xsol\", "⧸" },
        { @"\zhide\", "⧹" },
        { @"\doubleplus\", "⧺" },
        { @"\tripleplus\", "⧻" },
        { @"\lcurvyangle\", "⧼" },
        { @"\rcurvyangle\", "⧽" },
        { @"\tplus\", "⧾" },
        { @"\tminus\", "⧿" },
        { @"\bigodot\", "⨀" },
        { @"\bigoplus\", "⨁" },
        { @"\bigotimes\", "⨂" },
        { @"\bigcupdot\", "⨃" },
        { @"\biguplus\", "⨄" },
        { @"\bigsqcap\", "⨅" },
        { @"\bigsqcup\", "⨆" },
        { @"\conjquant\", "⨇" },
        { @"\disjquant\", "⨈" },
        { @"\varprod\", "⨉" },
        { @"\modtwosum\", "⨊" },
        { @"\sumint\", "⨋" },
        { @"\iiiint\", "⨌" },
        { @"\intbar\", "⨍" },
        { @"\intBar\", "⨎" },
        { @"\fint\", "⨏" },
        { @"\cirfnint\", "⨐" },
        { @"\awint\", "⨑" },
        { @"\rppolint\", "⨒" },
        { @"\scpolint\", "⨓" },
        { @"\npolint\", "⨔" },
        { @"\pointint\", "⨕" },
        { @"\sqint\", "⨖" },
        { @"\intlarhk\", "⨗" },
        { @"\intx\", "⨘" },
        { @"\intcap\", "⨙" },
        { @"\intcup\", "⨚" },
        { @"\upint\", "⨛" },
        { @"\lowint\", "⨜" },
        { @"\Join\", "⨝" },
        { @"\bigtriangleleft\", "⨞" },
        { @"\zcmp\", "⨟" },
        { @"\zpipe\", "⨠" },
        { @"\zproject\", "⨡" },
        { @"\ringplus\", "⨢" },
        { @"\plushat\", "⨣" },
        { @"\simplus\", "⨤" },
        { @"\plusdot\", "⨥" },
        { @"\plussim\", "⨦" },
        { @"\plussubtwo\", "⨧" },
        { @"\plustrif\", "⨨" },
        { @"\commaminus\", "⨩" },
        { @"\minusdot\", "⨪" },
        { @"\minusfdots\", "⨫" },
        { @"\minusrdots\", "⨬" },
        { @"\opluslhrim\", "⨭" },
        { @"\oplusrhrim\", "⨮" },
        { @"\vectimes\", "⨯" },
        { @"\dottimes\", "⨰" },
        { @"\timesbar\", "⨱" },
        { @"\btimes\", "⨲" },
        { @"\smashtimes\", "⨳" },
        { @"\otimeslhrim\", "⨴" },
        { @"\otimesrhrim\", "⨵" },
        { @"\otimeshat\", "⨶" },
        { @"\Otimes\", "⨷" },
        { @"\odiv\", "⨸" },
        { @"\triangleplus\", "⨹" },
        { @"\triangleminus\", "⨺" },
        { @"\triangletimes\", "⨻" },
        { @"\intprod\", "⨼" },
        { @"\intprodr\", "⨽" },
        { @"\fcmp\", "⨾" },
        { @"\amalg\", "⨿" },
        { @"\capdot\", "⩀" },
        { @"\uminus\", "⩁" },
        { @"\barcup\", "⩂" },
        { @"\barcap\", "⩃" },
        { @"\capwedge\", "⩄" },
        { @"\cupvee\", "⩅" },
        { @"\cupovercap\", "⩆" },
        { @"\capovercup\", "⩇" },
        { @"\cupbarcap\", "⩈" },
        { @"\capbarcup\", "⩉" },
        { @"\twocups\", "⩊" },
        { @"\twocaps\", "⩋" },
        { @"\closedvarcup\", "⩌" },
        { @"\closedvarcap\", "⩍" },
        { @"\Sqcap\", "⩎" },
        { @"\Sqcup\", "⩏" },
        { @"\closedvarcupsmashprod\", "⩐" },
        { @"\wedgeodot\", "⩑" },
        { @"\veeodot\", "⩒" },
        { @"\Wedge\", "⩓" },
        { @"\Vee\", "⩔" },
        { @"\wedgeonwedge\", "⩕" },
        { @"\veeonvee\", "⩖" },
        { @"\bigslopedvee\", "⩗" },
        { @"\bigslopedwedge\", "⩘" },
        { @"\veeonwedge\", "⩙" },
        { @"\wedgemidvert\", "⩚" },
        { @"\veemidvert\", "⩛" },
        { @"\midbarwedge\", "⩜" },
        { @"\midbarvee\", "⩝" },
        { @"\doublebarwedge\", "⩞" },
        { @"\wedgebar\", "⩟" },
        { @"\wedgedoublebar\", "⩠" },
        { @"\varveebar\", "⩡" },
        { @"\doublebarvee\", "⩢" },
        { @"\veedoublebar\", "⩣" },
        { @"\dsub\", "⩤" },
        { @"\rsub\", "⩥" },
        { @"\eqdot\", "⩦" },
        { @"\dotequiv\", "⩧" },
        { @"\equivVert\", "⩨" },
        { @"\equivVvert\", "⩩" },
        { @"\dotsim\", "⩪" },
        { @"\simrdots\", "⩫" },
        { @"\simminussim\", "⩬" },
        { @"\congdot\", "⩭" },
        { @"\asteq\", "⩮" },
        { @"\hatapprox\", "⩯" },
        { @"\approxeqq\", "⩰" },
        { @"\eqqplus\", "⩱" },
        { @"\pluseqq\", "⩲" },
        { @"\eqqsim\", "⩳" },
        { @"\Coloneqq\", "⩴" },
        { @"\Equal\", "⩵" },
        { @"\Same\", "⩶" },
        { @"\ddotseq\", "⩷" },
        { @"\equivDD\", "⩸" },
        { @"\ltcir\", "⩹" },
        { @"\gtcir\", "⩺" },
        { @"\ltquest\", "⩻" },
        { @"\gtquest\", "⩼" },
        { @"\leqslant\", "⩽" },
        { @"\geqslant\", "⩾" },
        { @"\lesdot\", "⩿" },
        { @"\gesdot\", "⪀" },
        { @"\lesdoto\", "⪁" },
        { @"\gesdoto\", "⪂" },
        { @"\lesdotor\", "⪃" },
        { @"\gesdotol\", "⪄" },
        { @"\lessapprox\", "⪅" },
        { @"\gtrapprox\", "⪆" },
        { @"\lneq\", "⪇" },
        { @"\gneq\", "⪈" },
        { @"\lnapprox\", "⪉" },
        { @"\gnapprox\", "⪊" },
        { @"\lesseqqgtr\", "⪋" },
        { @"\gtreqqless\", "⪌" },
        { @"\lsime\", "⪍" },
        { @"\gsime\", "⪎" },
        { @"\lsimg\", "⪏" },
        { @"\gsiml\", "⪐" },
        { @"\lgE\", "⪑" },
        { @"\glE\", "⪒" },
        { @"\lesges\", "⪓" },
        { @"\gesles\", "⪔" },
        { @"\eqslantless\", "⪕" },
        { @"\eqslantgtr\", "⪖" },
        { @"\elsdot\", "⪗" },
        { @"\egsdot\", "⪘" },
        { @"\eqqless\", "⪙" },
        { @"\eqqgtr\", "⪚" },
        { @"\eqqslantless\", "⪛" },
        { @"\eqqslantgtr\", "⪜" },
        { @"\simless\", "⪝" },
        { @"\simgtr\", "⪞" },
        { @"\simlE\", "⪟" },
        { @"\simgE\", "⪠" },
        { @"\NestedLessLess\", "⪡" },
        { @"\NestedGreaterGreater\", "⪢" },
        { @"\partialmeetcontraction\", "⪣" },
        { @"\glj\", "⪤" },
        { @"\gla\", "⪥" },
        { @"\leftslice\", "⪦" },
        { @"\rightslice\", "⪧" },
        { @"\lescc\", "⪨" },
        { @"\gescc\", "⪩" },
        { @"\smt\", "⪪" },
        { @"\lat\", "⪫" },
        { @"\smte\", "⪬" },
        { @"\late\", "⪭" },
        { @"\bumpeqq\", "⪮" },
        { @"\preceq\", "⪯" },
        { @"\succeq\", "⪰" },
        { @"\precneq\", "⪱" },
        { @"\succneq\", "⪲" },
        { @"\preceqq\", "⪳" },
        { @"\succeqq\", "⪴" },
        { @"\precneqq\", "⪵" },
        { @"\succneqq\", "⪶" },
        { @"\precapprox\", "⪷" },
        { @"\succapprox\", "⪸" },
        { @"\precnapprox\", "⪹" },
        { @"\succnapprox\", "⪺" },
        { @"\llcurly\", "⪻" },
        { @"\ggcurly\", "⪼" },
        { @"\subsetdot\", "⪽" },
        { @"\supsetdot\", "⪾" },
        { @"\subsetplus\", "⪿" },
        { @"\supsetplus\", "⫀" },
        { @"\submult\", "⫁" },
        { @"\supmult\", "⫂" },
        { @"\subedot\", "⫃" },
        { @"\supedot\", "⫄" },
        { @"\subseteqq\", "⫅" },
        { @"\supseteqq\", "⫆" },
        { @"\subsim\", "⫇" },
        { @"\supsim\", "⫈" },
        { @"\subsetapprox\", "⫉" },
        { @"\supsetapprox\", "⫊" },
        { @"\subsetneqq\", "⫋" },
        { @"\supsetneqq\", "⫌" },
        { @"\lsqhook\", "⫍" },
        { @"\rsqhook\", "⫎" },
        { @"\csub\", "⫏" },
        { @"\csup\", "⫐" },
        { @"\csube\", "⫑" },
        { @"\csupe\", "⫒" },
        { @"\subsup\", "⫓" },
        { @"\supsub\", "⫔" },
        { @"\subsub\", "⫕" },
        { @"\supsup\", "⫖" },
        { @"\suphsub\", "⫗" },
        { @"\supdsub\", "⫘" },
        { @"\forkv\", "⫙" },
        { @"\topfork\", "⫚" },
        { @"\mlcp\", "⫛" },
        { @"\forks\", "⫝̸" },
        { @"\forksnot\", "⫝" },
        { @"\shortlefttack\", "⫞" },
        { @"\shortdowntack\", "⫟" },
        { @"\shortuptack\", "⫠" },
        { @"\perps\", "⫡" },
        { @"\vDdash\", "⫢" },
        { @"\dashV\", "⫣" },
        { @"\Dashv\", "⫤" },
        { @"\DashV\", "⫥" },
        { @"\varVdash\", "⫦" },
        { @"\Barv\", "⫧" },
        { @"\vBar\", "⫨" },
        { @"\vBarv\", "⫩" },
        { @"\Top\", "⫪" },
        { @"\Bot\", "⫫" },
        { @"\Not\", "⫬" },
        { @"\bNot\", "⫭" },
        { @"\revnmid\", "⫮" },
        { @"\cirmid\", "⫯" },
        { @"\midcir\", "⫰" },
        { @"\topcir\", "⫱" },
        { @"\nhpar\", "⫲" },
        { @"\parsim\", "⫳" },
        { @"\interleave\", "⫴" },
        { @"\nhVvert\", "⫵" },
        { @"\threedotcolon\", "⫶" },
        { @"\lllnest\", "⫷" },
        { @"\gggnest\", "⫸" },
        { @"\leqqslant\", "⫹" },
        { @"\geqqslant\", "⫺" },
        { @"\trslash\", "⫻" },
        { @"\biginterleave\", "⫼" },
        { @"\sslash\", "⫽" },
        { @"\talloblong\", "⫾" },
        { @"\bigtalloblong\", "⫿" },
        { @"\newhitearrow\", "⬀" },
        { @"\nwwhitearrow\", "⬁" },
        { @"\sewhitearrow\", "⬂" },
        { @"\swwhitearrow\", "⬃" },
        { @"\lrwhitearrow\", "⬄" },
        { @"\lblackarrow\", "⬅" },
        // ⬆                       \UPWARDS blackarrow
        // ⬇                       \DOWNWARDS blackarrow
        // ⬈                       \NORTH EAST blackarrow
        // ⬉                       \NORTH WEST blackarrow
        // ⬊                       \SOUTH EAST blackarrow
        // ⬋                       \SOUTH WEST blackarrow
        // ⬌                       \LEFT RIGHT blackarrow
        // ⬍                       \UP DOWN blackarrow
        // ⬎                       \RIGHTWARDS arrow WITH TIP DOWNWARDS
        // ⬏                       \RIGHTWARDS arrow WITH TIP UPWARDS
        // ⬐                       \LEFTWARDS arrow WITH TIP DOWNWARDS
        // ⬑                       \LEFTWARDS arrow WITH TIP UPWARDS
        { @"\squaretopblack\", "⬒" },
        { @"\squarebotblack\", "⬓" },
        { @"\squareurblack\", "⬔" },
        { @"\squarellblack\", "⬕" },
        { @"\diamondleftblack\", "⬖" },
        { @"\diamondrightblack\", "⬗" },
        { @"\diamondtopblack\", "⬘" },
        { @"\diamondbotblack\", "⬙" },
        { @"\dottedsquare\", "⬚" },
        { @"\blacksquare\", "⬛" },
        { @"\square\", "⬜" },
        { @"\vysmblksquare\", "⬝" },
        { @"\vysmwhtsquare\", "⬞" },
        { @"\pentagonblack\", "⬟" },
        { @"\pentagon\", "⬠" },
        { @"\varhexagon\", "⬡" },
        { @"\varhexagonblack\", "⬢" },
        { @"\hexagonblack\", "⬣" },
        { @"\lgblkcircle\", "⬤" },
        { @"\mdblkdiamond\", "⬥" },
        { @"\mdwhtdiamond\", "⬦" },
        { @"\mdblklozenge\", "⬧" },
        { @"\mdwhtlozenge\", "⬨" },
        { @"\smblkdiamond\", "⬩" },
        { @"\smblklozenge\", "⬪" },
        { @"\smwhtlozenge\", "⬫" },
        { @"\blkhorzoval\", "⬬" },
        { @"\whthorzoval\", "⬭" },
        { @"\blkvertoval\", "⬮" },
        { @"\whtvertoval\", "⬯" },
        { @"\circleonleftarrow\", "⬰" },
        { @"\leftthreearrows\", "⬱" },
        { @"\leftarrowonoplus\", "⬲" },
        { @"\longleftsquigarrow\", "⬳" },
        { @"\nvtwoheadleftarrow\", "⬴" },
        { @"\nVtwoheadleftarrow\", "⬵" },
        { @"\twoheadmapsfrom\", "⬶" },
        { @"\twoheadleftdbkarrow\", "⬷" },
        { @"\leftdotarrow\", "⬸" },
        { @"\nvleftarrowtail\", "⬹" },
        { @"\nVleftarrowtail\", "⬺" },
        { @"\twoheadleftarrowtail\", "⬻" },
        { @"\nvtwoheadleftarrowtail\", "⬼" },
        { @"\nVtwoheadleftarrowtail\", "⬽" },
        { @"\leftarrowx\", "⬾" },
        { @"\leftcurvedarrow\", "⬿" },
        { @"\equalleftarrow\", "⭀" },
        { @"\bsimilarleftarrow\", "⭁" },
        { @"\leftarrowbackapprox\", "⭂" },
        { @"\rightarrowgtr\", "⭃" },
        { @"\rightarrowsupset\", "⭄" },
        { @"\LLeftarrow\", "⭅" },
        { @"\RRightarrow\", "⭆" },
        { @"\bsimilarrightarrow\", "⭇" },
        { @"\rightarrowbackapprox\", "⭈" },
        { @"\similarleftarrow\", "⭉" },
        { @"\leftarrowapprox\", "⭊" },
        { @"\leftarrowbsimilar\", "⭋" },
        { @"\rightarrowbsimilar\", "⭌" },
        { @"\medwhitestar\", "⭐" },
        { @"\medblackstar\", "⭑" },
        { @"\smwhitestar\", "⭒" },
        { @"\rightpentagonblack\", "⭓" },
        { @"\rightpentagon\", "⭔" },
        //{ @"\langle\", "〈" },
        //{ @"\rangle\", "〉" },
        { @"\postalmark\", "〒" },
        //{ @"\lbrbrak\", "〔" },
        //{ @"\rbrbrak\", "〕" },
        //{ @"\Lbrbrak\", "〘" },
        //{ @"\Rbrbrak\", "〙" },
        //{ @"\llbracket\", "〚" },
        //{ @"\rrbracket\", "〛" },
        { @"\hzigzag\", "〰" },
        { @"\hiraganano\", "の" },
         // ﬩                       \HEBREW LETTER ALTERNATIVE PLUS SIGN (doesn’t have cross shape)
        // ︀                       \VARIATION SELECTOR-1
        // ﹡                       \SMALL ASTERISK
        // ﹢                       \SMALL PLUS SIGN
        // ﹣                       \SMALL HYPHEN-MINUS
        // ﹤                       \SMALL LESS-THAN SIGN
        // ﹥                       \SMALL GREATER-THAN SIGN
        // ﹦                       \SMALL EQUALS SIGN
        // ﹨                       \SMALL REVERSE SOLIDUS
        // ＋                      \FULLWIDTH PLUS SIGN
        // ＜                      \FULLWIDTH LESS-THAN SIGN
        // ＝                      \FULLWIDTH EQUALS SIGN
        // ＞                      \FULLWIDTH GREATER-THAN SIGN
        // ＼                      \FULLWIDTH REVERSE SOLIDUS
        // ＾                      \FULLWIDTH CIRCUMFLEX ACCENT
        // ｜                      \FULLWIDTH VERTICAL LINE
        // ～                      \FULLWIDTH TILDE
        // ￢                       \FULLWIDTH NOT SIGN
        // ￩                       \HALFWIDTH LEFTWARDS ARROW
        // ￪                       \HALFWIDTH UPWARDS ARROW
        // ￫                       \HALFWIDTH RIGHTWARDS ARROW
        // ￬                       \HALFWIDTH DOWNWARDS ARROW
        { @"\A\", "𝐴" },
        { @"\B\", "𝐵" },
        { @"\C\", "𝐶" },
        { @"\D\", "𝐷" },
        { @"\E\", "𝐸" },
        { @"\F\", "𝐹" },
        { @"\G\", "𝐺" },
        { @"\H\", "𝐻" },
        { @"\I\", "𝐼" },
        { @"\J\", "𝐽" },
        { @"\K\", "𝐾" },
        { @"\L\", "𝐿" },
        { @"\M\", "𝑀" },
        { @"\N\", "𝑁" },
        { @"\O\", "𝑂" },
        { @"\P\", "𝑃" },
        { @"\Q\", "𝑄" },
        { @"\R\", "𝑅" },
        { @"\S\", "𝑆" },
        { @"\T\", "𝑇" },
        { @"\U\", "𝑈" },
        { @"\V\", "𝑉" },
        { @"\W\", "𝑊" },
        { @"\X\", "𝑋" },
        { @"\Y\", "𝑌" },
        { @"\Z\", "𝑍" },
        { @"\a\", "𝑎" },
        { @"\b\", "𝑏" },
        { @"\c\", "𝑐" },
        { @"\d\", "𝑑" },
        { @"\e\", "𝑒" },
        { @"\f\", "𝑓" },
        { @"\g\", "𝑔" },
        { @"\i\", "𝑖" },
        { @"\h\", "ℎ" },
        { @"\j\", "𝑗" },
        { @"\k\", "𝑘" },
        { @"\l\", "𝑙" },
        { @"\m\", "𝑚" },
        { @"\n\", "𝑛" },
        { @"\o\", "𝑜" },
        { @"\p\", "𝑝" },
        { @"\q\", "𝑞" },
        { @"\r\", "𝑟" },
        { @"\s\", "𝑠" },
        { @"\t\", "𝑡" },
        { @"\u\", "𝑢" },
        { @"\v\", "𝑣" },
        { @"\w\", "𝑤" },
        { @"\x\", "𝑥" },
        { @"\y\", "𝑦" },
        { @"\z\", "𝑧" },
        { @"\imath\", "𝚤" },
        { @"\jmath\", "𝚥" },
        { @"\&", "＆" },
    };

    private static readonly Dictionary<char, string> superscriptMapping = new()
    {
        { '0', "⁰" },
        { '1', "¹" },
        { '2', "²" },
        { '3', "³" },
        { '4', "⁴" },
        { '5', "⁵" },
        { '6', "⁶" },
        { '7', "⁷" },
        { '8', "⁸" },
        { '9', "⁹" },
        { '+', "⁺" },
        { '-', "⁻" },
        { '=', "⁼" },
        { '(', "⁽" },
        { ')', "⁾" },
        { 'a', "ᵃ" },
        { 'b', "ᵇ" },
        { 'c', "ᶜ" },
        { 'd', "ᵈ" },
        { 'e', "ᵉ" },
        { 'f', "ᶠ" },
        { 'g', "ᵍ" },
        { 'h', "ʰ" },
        { 'i', "ⁱ" },
        { 'j', "ʲ" },
        { 'k', "ᵏ" },
        { 'l', "ˡ" },
        { 'm', "ᵐ" },
        { 'n', "ⁿ" },
        { 'o', "ᵒ" },
        { 'p', "ᵖ" },
        { 'r', "ʳ" },
        { 's', "ˢ" },
        { 't', "ᵗ" },
        { 'u', "ᵘ" },
        { 'v', "ᵛ" },
        { 'w', "ʷ" },
        { 'x', "ˣ" },
        { 'y', "ʸ" },
        { 'z', "ᶻ" },
    };
    private static readonly Regex superscriptPattern = new(@"\^\{([0-9\+\-=\(\)a-pr-z ]+?)\}", RegexOptions.Compiled);
    private static readonly Regex superscriptPattern1 = new(@"\^([0-9\+\-=\(\)a-pr-z ])", RegexOptions.Compiled);
    public static string ToSuperscript(string str) => Remap(str, superscriptMapping);

    private static readonly Regex superscriptNumberPattern = new(@"⁻?[⁰¹²³⁴⁵⁶⁷⁸⁹]+", RegexOptions.Compiled);
    private const string SUPERSCRIPT_NUMBERS = "⁰¹²³⁴⁵⁶⁷⁸⁹⁻";
    public static string SuperscriptToNumber(string expr) =>
        superscriptNumberPattern.Replace(expr, (match) =>
            "^" +
            string.Concat(match.Value.Select(ch => "0123456789-"[SUPERSCRIPT_NUMBERS.IndexOf(ch)]))
        );

    private static readonly Dictionary<char, string> subscriptMapping = new()
    {
        { '0', "₀" },
        { '1', "₁" },
        { '2', "₂" },
        { '3', "₃" },
        { '4', "₄" },
        { '5', "₅" },
        { '6', "₆" },
        { '7', "₇" },
        { '8', "₈" },
        { '9', "₉" },
        { '+', "₊" },
        { '-', "₋" },
        { '=', "₌" },
        { '(', "₍" },
        { ')', "₎" },
        { 'a', "ₐ" },
        { 'e', "ₑ" },
        { 'h', "ₕ" },
        { 'k', "ₖ" },
        { 'l', "ₗ" },
        { 'm', "ₘ" },
        { 'n', "ₙ" },
        { 'o', "ₒ" },
        { 'p', "ₚ" },
        { 's', "ₛ" },
        { 't', "ₜ" },
        { 'x', "ₓ" },
    };
    private static readonly Regex subscriptPattern = new(@"_\{([0-9\+\-=\(\)aexhklmnopst ]+?)\}", RegexOptions.Compiled);
    private static readonly Regex subscriptPattern1 = new(@"_([0-9\+\-=\(\)aexhklmnopst ])", RegexOptions.Compiled);
    public static string ToSubscript(string str) => Remap(str, subscriptMapping);

    private static readonly Dictionary<char, string> ttMapping = new()
    {
        { '0', "𝟶" },
        { '1', "𝟷" },
        { '2', "𝟸" },
        { '3', "𝟹" },
        { '4', "𝟺" },
        { '5', "𝟻" },
        { '6', "𝟼" },
        { '7', "𝟽" },
        { '8', "𝟾" },
        { '9', "𝟿" },
        { 'A', "𝙰" },
        { 'B', "𝙱" },
        { 'C', "𝙲" },
        { 'D', "𝙳" },
        { 'E', "𝙴" },
        { 'F', "𝙵" },
        { 'G', "𝙶" },
        { 'H', "𝙷" },
        { 'I', "𝙸" },
        { 'J', "𝙹" },
        { 'K', "𝙺" },
        { 'L', "𝙻" },
        { 'M', "𝙼" },
        { 'N', "𝙽" },
        { 'O', "𝙾" },
        { 'P', "𝙿" },
        { 'Q', "𝚀" },
        { 'R', "𝚁" },
        { 'S', "𝚂" },
        { 'T', "𝚃" },
        { 'U', "𝚄" },
        { 'V', "𝚅" },
        { 'W', "𝚆" },
        { 'X', "𝚇" },
        { 'Y', "𝚈" },
        { 'Z', "𝚉" },
        { 'a', "𝚊" },
        { 'b', "𝚋" },
        { 'c', "𝚌" },
        { 'd', "𝚍" },
        { 'e', "𝚎" },
        { 'f', "𝚏" },
        { 'g', "𝚐" },
        { 'h', "𝚑" },
        { 'i', "𝚒" },
        { 'j', "𝚓" },
        { 'k', "𝚔" },
        { 'l', "𝚕" },
        { 'm', "𝚖" },
        { 'n', "𝚗" },
        { 'o', "𝚘" },
        { 'p', "𝚙" },
        { 'q', "𝚚" },
        { 'r', "𝚛" },
        { 's', "𝚜" },
        { 't', "𝚝" },
        { 'u', "𝚞" },
        { 'v', "𝚟" },
        { 'w', "𝚠" },
        { 'x', "𝚡" },
        { 'y', "𝚢" },
        { 'z', "𝚣" },
    };
    private static readonly Regex ttPattern = new(@"\\tt\{([0-9A-Za-z ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> bfMapping = new()
    {
        { '0', "𝟎" },
        { '1', "𝟏" },
        { '2', "𝟐" },
        { '3', "𝟑" },
        { '4', "𝟒" },
        { '5', "𝟓" },
        { '6', "𝟔" },
        { '7', "𝟕" },
        { '8', "𝟖" },
        { '9', "𝟗" },
        { 'A', "𝐀" },
        { 'B', "𝐁" },
        { 'C', "𝐂" },
        { 'D', "𝐃" },
        { 'E', "𝐄" },
        { 'F', "𝐅" },
        { 'G', "𝐆" },
        { 'H', "𝐇" },
        { 'I', "𝐈" },
        { 'J', "𝐉" },
        { 'K', "𝐊" },
        { 'L', "𝐋" },
        { 'M', "𝐌" },
        { 'N', "𝐍" },
        { 'O', "𝐎" },
        { 'P', "𝐏" },
        { 'Q', "𝐐" },
        { 'R', "𝐑" },
        { 'S', "𝐒" },
        { 'T', "𝐓" },
        { 'U', "𝐔" },
        { 'V', "𝐕" },
        { 'W', "𝐖" },
        { 'X', "𝐗" },
        { 'Y', "𝐘" },
        { 'Z', "𝐙" },
        { 'a', "𝐚" },
        { 'b', "𝐛" },
        { 'c', "𝐜" },
        { 'd', "𝐝" },
        { 'e', "𝐞" },
        { 'f', "𝐟" },
        { 'g', "𝐠" },
        { 'h', "𝐡" },
        { 'i', "𝐢" },
        { 'j', "𝐣" },
        { 'k', "𝐤" },
        { 'l', "𝐥" },
        { 'm', "𝐦" },
        { 'n', "𝐧" },
        { 'o', "𝐨" },
        { 'p', "𝐩" },
        { 'q', "𝐪" },
        { 'r', "𝐫" },
        { 's', "𝐬" },
        { 't', "𝐭" },
        { 'u', "𝐮" },
        { 'v', "𝐯" },
        { 'w', "𝐰" },
        { 'x', "𝐱" },
        { 'y', "𝐲" },
        { 'z', "𝐳" },
        { 'Α', "𝚨" },
        { 'Β', "𝚩" },
        { 'Γ', "𝚪" },
        { 'Δ', "𝚫" },
        { 'Ε', "𝚬" },
        { 'Ζ', "𝚭" },
        { 'Η', "𝚮" },
        { 'Θ', "𝚯" },
        { 'Ι', "𝚰" },
        { 'Κ', "𝚱" },
        { 'Λ', "𝚲" },
        { 'Μ', "𝚳" },
        { 'Ν', "𝚴" },
        { 'Ξ', "𝚵" },
        { 'Ο', "𝚶" },
        { 'Π', "𝚷" },
        { 'Ρ', "𝚸" },
        { 'ϴ', "𝚹" },
        { 'Σ', "𝚺" },
        { 'Τ', "𝚻" },
        { 'Υ', "𝚼" },
        { 'Φ', "𝚽" },
        { 'Χ', "𝚾" },
        { 'Ψ', "𝚿" },
        { 'Ω', "𝛀" },
        { '∇', "𝛁" },
        { 'α', "𝛂" },
        { 'β', "𝛃" },
        { 'γ', "𝛄" },
        { 'δ', "𝛅" },
        { 'ε', "𝛆" },
        { 'ζ', "𝛇" },
        { 'η', "𝛈" },
        { 'θ', "𝛉" },
        { 'ι', "𝛊" },
        { 'κ', "𝛋" },
        { 'λ', "𝛌" },
        { 'μ', "𝛍" },
        { 'ν', "𝛎" },
        { 'ξ', "𝛏" },
        { 'ο', "𝛐" },
        { 'π', "𝛑" },
        { 'ρ', "𝛒" },
        { 'ς', "𝛓" },
        { 'σ', "𝛔" },
        { 'τ', "𝛕" },
        { 'υ', "𝛖" },
        { 'φ', "𝛗" },
        { 'χ', "𝛘" },
        { 'ψ', "𝛙" },
        { 'ω', "𝛚" },
        { '∂', "𝛛" },
        { 'ϵ', "𝛜" },
        { 'ϑ', "𝛝" },
        { 'ϰ', "𝛞" },
        { 'ϕ', "𝛟" },
        { 'ϱ', "𝛠" },
        { 'ϖ', "𝛡" },
        { 'Ϝ', "𝟊" },
        { 'ϝ', "𝟋" },
    };
    private static readonly Regex bfPattern = new(@"\\bf\{([0-9A-Za-zΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡϴΣΤΥΦΧΨΩ∇αβγδεζηθικλμνξοπρςστυφχψω∂ϵϑϰϕϱϖ ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> bbMapping = new()
    {
        { '0', "𝟘" },
        { '1', "𝟙" },
        { '2', "𝟚" },
        { '3', "𝟛" },
        { '4', "𝟜" },
        { '5', "𝟝" },
        { '6', "𝟞" },
        { '7', "𝟟" },
        { '8', "𝟠" },
        { '9', "𝟡" },
        { 'A', "𝔸" },
        { 'B', "𝔹" },
        { 'C', "ℂ" },
        { 'D', "𝔻" },
        { 'E', "𝔼" },
        { 'F', "𝔽" },
        { 'G', "𝔾" },
        { 'H', "ℍ" },
        { 'I', "𝕀" },
        { 'J', "𝕁" },
        { 'K', "𝕂" },
        { 'L', "𝕃" },
        { 'M', "𝕄" },
        { 'N', "ℕ" },
        { 'O', "𝕆" },
        { 'P', "ℙ" },
        { 'Q', "ℚ" },
        { 'R', "ℝ" },
        { 'S', "𝕊" },
        { 'T', "𝕋" },
        { 'U', "𝕌" },
        { 'V', "𝕍" },
        { 'W', "𝕎" },
        { 'X', "𝕏" },
        { 'Y', "𝕐" },
        { 'Z', "ℤ" },
        { 'a', "𝕒" },
        { 'b', "𝕓" },
        { 'c', "𝕔" },
        { 'd', "𝕕" },
        { 'e', "𝕖" },
        { 'f', "𝕗" },
        { 'g', "𝕘" },
        { 'h', "𝕙" },
        { 'i', "𝕚" },
        { 'j', "𝕛" },
        { 'k', "𝕜" },
        { 'l', "𝕝" },
        { 'm', "𝕞" },
        { 'n', "𝕟" },
        { 'o', "𝕠" },
        { 'p', "𝕡" },
        { 'q', "𝕢" },
        { 'r', "𝕣" },
        { 's', "𝕤" },
        { 't', "𝕥" },
        { 'u', "𝕦" },
        { 'v', "𝕧" },
        { 'w', "𝕨" },
        { 'x', "𝕩" },
        { 'y', "𝕪" },
        { 'z', "𝕫" },
        { 'π', "ℼ" },
        { 'γ', "ℽ" },
        { 'Γ', "ℾ" },
        { 'Π', "ℿ" },
        { 'Σ', "⅀" },
    };
    private static readonly Regex bbPattern = new(@"\\bb\{([0-9A-Za-zπγΓΠΣ ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> sfMapping = new()
    {
        { '0', "𝟢" },
        { '1', "𝟣" },
        { '2', "𝟤" },
        { '3', "𝟥" },
        { '4', "𝟦" },
        { '5', "𝟧" },
        { '6', "𝟨" },
        { '7', "𝟩" },
        { '8', "𝟪" },
        { '9', "𝟫" },
        { 'A', "𝖠" },
        { 'B', "𝖡" },
        { 'C', "𝖢" },
        { 'D', "𝖣" },
        { 'E', "𝖤" },
        { 'F', "𝖥" },
        { 'G', "𝖦" },
        { 'H', "𝖧" },
        { 'I', "𝖨" },
        { 'J', "𝖩" },
        { 'K', "𝖪" },
        { 'L', "𝖫" },
        { 'M', "𝖬" },
        { 'N', "𝖭" },
        { 'O', "𝖮" },
        { 'P', "𝖯" },
        { 'Q', "𝖰" },
        { 'R', "𝖱" },
        { 'S', "𝖲" },
        { 'T', "𝖳" },
        { 'U', "𝖴" },
        { 'V', "𝖵" },
        { 'W', "𝖶" },
        { 'X', "𝖷" },
        { 'Y', "𝖸" },
        { 'Z', "𝖹" },
        { 'a', "𝖺" },
        { 'b', "𝖻" },
        { 'c', "𝖼" },
        { 'd', "𝖽" },
        { 'e', "𝖾" },
        { 'f', "𝖿" },
        { 'g', "𝗀" },
        { 'h', "𝗁" },
        { 'i', "𝗂" },
        { 'j', "𝗃" },
        { 'k', "𝗄" },
        { 'l', "𝗅" },
        { 'm', "𝗆" },
        { 'n', "𝗇" },
        { 'o', "𝗈" },
        { 'p', "𝗉" },
        { 'q', "𝗊" },
        { 'r', "𝗋" },
        { 's', "𝗌" },
        { 't', "𝗍" },
        { 'u', "𝗎" },
        { 'v', "𝗏" },
        { 'w', "𝗐" },
        { 'x', "𝗑" },
        { 'y', "𝗒" },
        { 'z', "𝗓" },
    };
    private static readonly Regex sfPattern = new(@"\\sf\{([0-9A-Za-z ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> itMapping = new()
    {
        { 'Α', "𝛢" },
        { 'Β', "𝛣" },
        { 'Γ', "𝛤" },
        { 'Δ', "𝛥" },
        { 'Ε', "𝛦" },
        { 'Ζ', "𝛧" },
        { 'Η', "𝛨" },
        { 'Θ', "𝛩" },
        { 'Ι', "𝛪" },
        { 'Κ', "𝛫" },
        { 'Λ', "𝛬" },
        { 'Μ', "𝛭" },
        { 'Ν', "𝛮" },
        { 'Ξ', "𝛯" },
        { 'Ο', "𝛰" },
        { 'Π', "𝛱" },
        { 'Ρ', "𝛲" },
        { 'ϴ', "𝛳" },
        { 'Σ', "𝛴" },
        { 'Τ', "𝛵" },
        { 'Υ', "𝛶" },
        { 'Φ', "𝛷" },
        { 'Χ', "𝛸" },
        { 'Ψ', "𝛹" },
        { 'Ω', "𝛺" },
        { '∇', "𝛻" },
        { 'α', "𝛼" },
        { 'β', "𝛽" },
        { 'γ', "𝛾" },
        { 'δ', "𝛿" },
        { 'ε', "𝜀" },
        { 'ζ', "𝜁" },
        { 'η', "𝜂" },
        { 'θ', "𝜃" },
        { 'ι', "𝜄" },
        { 'κ', "𝜅" },
        { 'λ', "𝜆" },
        { 'μ', "𝜇" },
        { 'ν', "𝜈" },
        { 'ξ', "𝜉" },
        { 'ο', "𝜊" },
        { 'π', "𝜋" },
        { 'ρ', "𝜌" },
        { 'ς', "𝜍" },
        { 'σ', "𝜎" },
        { 'τ', "𝜏" },
        { 'υ', "𝜐" },
        { 'φ', "𝜑" },
        { 'χ', "𝜒" },
        { 'ψ', "𝜓" },
        { 'ω', "𝜔" },
        { '∂', "𝜕" },
        { 'ϵ', "𝜖" },
        { 'ϑ', "𝜗" },
        { 'ϰ', "𝜘" },
        { 'ϕ', "𝜙" },
        { 'ϱ', "𝜚" },
        { 'ϖ', "𝜛" },
    };
    private static readonly Regex itPattern = new(@"\\it\{([ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡϴΣΤΥΦΧΨΩ∇αβγδεζηθικλμνξοπρςστυφχψω∂ϵϑϰϕϱϖ ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> frakMapping = new()
    {
        { 'A', "𝔄" },
        { 'B', "𝔅" },
        { 'C', "ℭ" },
        { 'D', "𝔇" },
        { 'E', "𝔈" },
        { 'F', "𝔉" },
        { 'G', "𝔊" },
        { 'H', "ℌ" },
        { 'J', "𝔍" },
        { 'K', "𝔎" },
        { 'L', "𝔏" },
        { 'M', "𝔐" },
        { 'N', "𝔑" },
        { 'O', "𝔒" },
        { 'P', "𝔓" },
        { 'Q', "𝔔" },
        { 'S', "𝔖" },
        { 'T', "𝔗" },
        { 'U', "𝔘" },
        { 'V', "𝔙" },
        { 'W', "𝔚" },
        { 'X', "𝔛" },
        { 'Y', "𝔜" },
        { 'Z', "ℨ" },
        { 'a', "𝔞" },
        { 'b', "𝔟" },
        { 'c', "𝔠" },
        { 'd', "𝔡" },
        { 'e', "𝔢" },
        { 'f', "𝔣" },
        { 'g', "𝔤" },
        { 'h', "𝔥" },
        { 'i', "𝔦" },
        { 'j', "𝔧" },
        { 'k', "𝔨" },
        { 'l', "𝔩" },
        { 'm', "𝔪" },
        { 'n', "𝔫" },
        { 'o', "𝔬" },
        { 'p', "𝔭" },
        { 'q', "𝔮" },
        { 'r', "𝔯" },
        { 's', "𝔰" },
        { 't', "𝔱" },
        { 'u', "𝔲" },
        { 'v', "𝔳" },
        { 'w', "𝔴" },
        { 'x', "𝔵" },
        { 'y', "𝔶" },
        { 'z', "𝔷" },

    };
    private static readonly Regex frakPattern = new(@"\\frak\{([A-Za-z ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> calMapping = new()
    {
        { 'A', "𝒜" },
        { 'B', "ℬ" },
        { 'C', "𝒞" },
        { 'D', "𝒟" },
        { 'E', "ℰ" },
        { 'F', "ℱ" },
        { 'G', "𝒢" },
        { 'H', "ℋ" },
        { 'I', "ℐ" },
        { 'J', "𝒥" },
        { 'K', "𝒦" },
        { 'L', "ℒ" },
        { 'M', "ℳ" },
        { 'N', "𝒩" },
        { 'O', "𝒪" },
        { 'P', "𝒫" },
        { 'Q', "𝒬" },
        { 'R', "ℛ" },
        { 'S', "𝒮" },
        { 'T', "𝒯" },
        { 'U', "𝒰" },
        { 'V', "𝒱" },
        { 'W', "𝒲" },
        { 'X', "𝒳" },
        { 'Y', "𝒴" },
        { 'Z', "𝒵" },
        { 'a', "𝒶" },
        { 'b', "𝒷" },
        { 'c', "𝒸" },
        { 'd', "𝒹" },
        { 'e', "ℯ" },
        { 'f', "𝒻" },
        { 'g', "ℊ" },
        { 'h', "𝒽" },
        { 'i', "𝒾" },
        { 'j', "𝒿" },
        { 'k', "𝓀" },
        { 'l', "𝓁" },
        { 'm', "𝓂" },
        { 'n', "𝓃" },
        { 'o', "ℴ" },
        { 'p', "𝓅" },
        { 'q', "𝓆" },
        { 'r', "𝓇" },
        { 's', "𝓈" },
        { 't', "𝓉" },
        { 'u', "𝓊" },
        { 'v', "𝓋" },
        { 'w', "𝓌" },
        { 'x', "𝓍" },
        { 'y', "𝓎" },
        { 'z', "𝓏" },
    };
    private static readonly Regex calPattern = new(@"\\cal\{([A-Za-z ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> sfbfMapping = new()
    {
        { 'A', "𝗔" },
        { 'B', "𝗕" },
        { 'C', "𝗖" },
        { 'D', "𝗗" },
        { 'E', "𝗘" },
        { 'F', "𝗙" },
        { 'G', "𝗚" },
        { 'H', "𝗛" },
        { 'I', "𝗜" },
        { 'J', "𝗝" },
        { 'K', "𝗞" },
        { 'L', "𝗟" },
        { 'M', "𝗠" },
        { 'N', "𝗡" },
        { 'O', "𝗢" },
        { 'P', "𝗣" },
        { 'Q', "𝗤" },
        { 'R', "𝗥" },
        { 'S', "𝗦" },
        { 'T', "𝗧" },
        { 'U', "𝗨" },
        { 'V', "𝗩" },
        { 'W', "𝗪" },
        { 'X', "𝗫" },
        { 'Y', "𝗬" },
        { 'Z', "𝗭" },
        { 'a', "𝗮" },
        { 'b', "𝗯" },
        { 'c', "𝗰" },
        { 'd', "𝗱" },
        { 'e', "𝗲" },
        { 'f', "𝗳" },
        { 'g', "𝗴" },
        { 'h', "𝗵" },
        { 'i', "𝗶" },
        { 'j', "𝗷" },
        { 'k', "𝗸" },
        { 'l', "𝗹" },
        { 'm', "𝗺" },
        { 'n', "𝗻" },
        { 'o', "𝗼" },
        { 'p', "𝗽" },
        { 'q', "𝗾" },
        { 'r', "𝗿" },
        { 's', "𝘀" },
        { 't', "𝘁" },
        { 'u', "𝘂" },
        { 'v', "𝘃" },
        { 'w', "𝘄" },
        { 'x', "𝘅" },
        { 'y', "𝘆" },
        { 'z', "𝘇" },
        { 'Α', "𝝖" },
        { 'Β', "𝝗" },
        { 'Γ', "𝝘" },
        { 'Δ', "𝝙" },
        { 'Ε', "𝝚" },
        { 'Ζ', "𝝛" },
        { 'Η', "𝝜" },
        { 'Θ', "𝝝" },
        { 'Ι', "𝝞" },
        { 'Κ', "𝝟" },
        { 'Λ', "𝝠" },
        { 'Μ', "𝝡" },
        { 'Ν', "𝝢" },
        { 'Ξ', "𝝣" },
        { 'Ο', "𝝤" },
        { 'Π', "𝝥" },
        { 'Ρ', "𝝦" },
        { 'ϴ', "𝝧" },
        { 'Σ', "𝝨" },
        { 'Τ', "𝝩" },
        { 'Υ', "𝝪" },
        { 'Φ', "𝝫" },
        { 'Χ', "𝝬" },
        { 'Ψ', "𝝭" },
        { 'Ω', "𝝮" },
        { '∇', "𝝯" },
        { 'α', "𝝰" },
        { 'β', "𝝱" },
        { 'γ', "𝝲" },
        { 'δ', "𝝳" },
        { 'ε', "𝝴" },
        { 'ζ', "𝝵" },
        { 'η', "𝝶" },
        { 'θ', "𝝷" },
        { 'ι', "𝝸" },
        { 'κ', "𝝹" },
        { 'λ', "𝝺" },
        { 'μ', "𝝻" },
        { 'ν', "𝝼" },
        { 'ξ', "𝝽" },
        { 'ο', "𝝾" },
        { 'π', "𝝿" },
        { 'ρ', "𝞀" },
        { 'ς', "𝞁" },
        { 'σ', "𝞂" },
        { 'τ', "𝞃" },
        { 'υ', "𝞄" },
        { 'φ', "𝞅" },
        { 'χ', "𝞆" },
        { 'ψ', "𝞇" },
        { 'ω', "𝞈" },
        { '∂', "𝞉" },
        { 'ϵ', "𝞊" },
        { 'ϑ', "𝞋" },
        { 'ϰ', "𝞌" },
        { 'ϕ', "𝞍" },
        { 'ϱ', "𝞎" },
        { 'ϖ', "𝞏" },
        { '0', "𝟬" },
        { '1', "𝟭" },
        { '2', "𝟮" },
        { '3', "𝟯" },
        { '4', "𝟰" },
        { '5', "𝟱" },
        { '6', "𝟲" },
        { '7', "𝟳" },
        { '8', "𝟴" },
        { '9', "𝟵" },
    };
    private static readonly Regex sfbfPattern = new(@"\\sfbf\{([0-9A-Za-zΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡϴΣΤΥΦΧΨΩ∇αβγδεζηθικλμνξοπρςστυφχψω∂ϵϑϰϕϱϖ ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> sfbfitMapping = new()
    {
        { 'A', "𝘼" },
        { 'B', "𝘽" },
        { 'C', "𝘾" },
        { 'D', "𝘿" },
        { 'E', "𝙀" },
        { 'F', "𝙁" },
        { 'G', "𝙂" },
        { 'H', "𝙃" },
        { 'I', "𝙄" },
        { 'J', "𝙅" },
        { 'K', "𝙆" },
        { 'L', "𝙇" },
        { 'M', "𝙈" },
        { 'N', "𝙉" },
        { 'O', "𝙊" },
        { 'P', "𝙋" },
        { 'Q', "𝙌" },
        { 'R', "𝙍" },
        { 'S', "𝙎" },
        { 'T', "𝙏" },
        { 'U', "𝙐" },
        { 'V', "𝙑" },
        { 'W', "𝙒" },
        { 'X', "𝙓" },
        { 'Y', "𝙔" },
        { 'Z', "𝙕" },
        { 'a', "𝙖" },
        { 'b', "𝙗" },
        { 'c', "𝙘" },
        { 'd', "𝙙" },
        { 'e', "𝙚" },
        { 'f', "𝙛" },
        { 'g', "𝙜" },
        { 'h', "𝙝" },
        { 'i', "𝙞" },
        { 'j', "𝙟" },
        { 'k', "𝙠" },
        { 'l', "𝙡" },
        { 'm', "𝙢" },
        { 'n', "𝙣" },
        { 'o', "𝙤" },
        { 'p', "𝙥" },
        { 'q', "𝙦" },
        { 'r', "𝙧" },
        { 's', "𝙨" },
        { 't', "𝙩" },
        { 'u', "𝙪" },
        { 'v', "𝙫" },
        { 'w', "𝙬" },
        { 'x', "𝙭" },
        { 'y', "𝙮" },
        { 'z', "𝙯" },
        { 'Α', "𝞐" },
        { 'Β', "𝞑" },
        { 'Γ', "𝞒" },
        { 'Δ', "𝞓" },
        { 'Ε', "𝞔" },
        { 'Ζ', "𝞕" },
        { 'Η', "𝞖" },
        { 'Θ', "𝞗" },
        { 'Ι', "𝞘" },
        { 'Κ', "𝞙" },
        { 'Λ', "𝞚" },
        { 'Μ', "𝞛" },
        { 'Ν', "𝞜" },
        { 'Ξ', "𝞝" },
        { 'Ο', "𝞞" },
        { 'Π', "𝞟" },
        { 'Ρ', "𝞠" },
        { 'ϴ', "𝞡" },
        { 'Σ', "𝞢" },
        { 'Τ', "𝞣" },
        { 'Υ', "𝞤" },
        { 'Φ', "𝞥" },
        { 'Χ', "𝞦" },
        { 'Ψ', "𝞧" },
        { 'Ω', "𝞨" },
        { '∇', "𝞩" },
        { 'α', "𝞪" },
        { 'β', "𝞫" },
        { 'γ', "𝞬" },
        { 'δ', "𝞭" },
        { 'ε', "𝞮" },
        { 'ζ', "𝞯" },
        { 'η', "𝞰" },
        { 'θ', "𝞱" },
        { 'ι', "𝞲" },
        { 'κ', "𝞳" },
        { 'λ', "𝞴" },
        { 'μ', "𝞵" },
        { 'ν', "𝞶" },
        { 'ξ', "𝞷" },
        { 'ο', "𝞸" },
        { 'π', "𝞹" },
        { 'ρ', "𝞺" },
        { 'ς', "𝞻" },
        { 'σ', "𝞼" },
        { 'τ', "𝞽" },
        { 'υ', "𝞾" },
        { 'φ', "𝞿" },
        { 'χ', "𝟀" },
        { 'ψ', "𝟁" },
        { 'ω', "𝟂" },
        { '∂', "𝟃" },
        { 'ϵ', "𝟄" },
        { 'ϑ', "𝟅" },
        { 'ϰ', "𝟆" },
        { 'ϕ', "𝟇" },
        { 'ϱ', "𝟈" },
        { 'ϖ', "𝟉" },
    };
    private static readonly Regex sfbfitPattern = new(@"\\sfbfit\{([A-Za-zΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡϴΣΤΥΦΧΨΩ∇αβγδεζηθικλμνξοπρςστυφχψω∂ϵϑϰϕϱϖ ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> bfitMapping = new()
    {
        { 'A', "𝑨" },
        { 'B', "𝑩" },
        { 'C', "𝑪" },
        { 'D', "𝑫" },
        { 'E', "𝑬" },
        { 'F', "𝑭" },
        { 'G', "𝑮" },
        { 'H', "𝑯" },
        { 'I', "𝑰" },
        { 'J', "𝑱" },
        { 'K', "𝑲" },
        { 'L', "𝑳" },
        { 'M', "𝑴" },
        { 'N', "𝑵" },
        { 'O', "𝑶" },
        { 'P', "𝑷" },
        { 'Q', "𝑸" },
        { 'R', "𝑹" },
        { 'S', "𝑺" },
        { 'T', "𝑻" },
        { 'U', "𝑼" },
        { 'V', "𝑽" },
        { 'W', "𝑾" },
        { 'X', "𝑿" },
        { 'Y', "𝒀" },
        { 'Z', "𝒁" },
        { 'a', "𝒂" },
        { 'b', "𝒃" },
        { 'c', "𝒄" },
        { 'd', "𝒅" },
        { 'e', "𝒆" },
        { 'f', "𝒇" },
        { 'g', "𝒈" },
        { 'h', "𝒉" },
        { 'i', "𝒊" },
        { 'j', "𝒋" },
        { 'k', "𝒌" },
        { 'l', "𝒍" },
        { 'm', "𝒎" },
        { 'n', "𝒏" },
        { 'o', "𝒐" },
        { 'p', "𝒑" },
        { 'q', "𝒒" },
        { 'r', "𝒓" },
        { 's', "𝒔" },
        { 't', "𝒕" },
        { 'u', "𝒖" },
        { 'v', "𝒗" },
        { 'w', "𝒘" },
        { 'x', "𝒙" },
        { 'y', "𝒚" },
        { 'z', "𝒛" },
        { 'Α', "𝜜" },
        { 'Β', "𝜝" },
        { 'Γ', "𝜞" },
        { 'Δ', "𝜟" },
        { 'Ε', "𝜠" },
        { 'Ζ', "𝜡" },
        { 'Η', "𝜢" },
        { 'Θ', "𝜣" },
        { 'Ι', "𝜤" },
        { 'Κ', "𝜥" },
        { 'Λ', "𝜦" },
        { 'Μ', "𝜧" },
        { 'Ν', "𝜨" },
        { 'Ξ', "𝜩" },
        { 'Ο', "𝜪" },
        { 'Π', "𝜫" },
        { 'Ρ', "𝜬" },
        { 'ϴ', "𝜭" },
        { 'Σ', "𝜮" },
        { 'Τ', "𝜯" },
        { 'Υ', "𝜰" },
        { 'Φ', "𝜱" },
        { 'Χ', "𝜲" },
        { 'Ψ', "𝜳" },
        { 'Ω', "𝜴" },
        { '∇', "𝜵" },
        { 'α', "𝜶" },
        { 'β', "𝜷" },
        { 'γ', "𝜸" },
        { 'δ', "𝜹" },
        { 'ε', "𝜺" },
        { 'ζ', "𝜻" },
        { 'η', "𝜼" },
        { 'θ', "𝜽" },
        { 'ι', "𝜾" },
        { 'κ', "𝜿" },
        { 'λ', "𝝀" },
        { 'μ', "𝝁" },
        { 'ν', "𝝂" },
        { 'ξ', "𝝃" },
        { 'ο', "𝝄" },
        { 'π', "𝝅" },
        { 'ρ', "𝝆" },
        { 'ς', "𝝇" },
        { 'σ', "𝝈" },
        { 'τ', "𝝉" },
        { 'υ', "𝝊" },
        { 'φ', "𝝋" },
        { 'χ', "𝝌" },
        { 'ψ', "𝝍" },
        { 'ω', "𝝎" },
        { '∂', "𝝏" },
        { 'ϵ', "𝝐" },
        { 'ϑ', "𝝑" },
        { 'ϰ', "𝝒" },
        { 'ϕ', "𝝓" },
        { 'ϱ', "𝝔" },
        { 'ϖ', "𝝕" },
    };
    private static readonly Regex bfitPattern = new(@"\\bfit\{([A-Za-zΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡϴΣΤΥΦΧΨΩ∇αβγδεζηθικλμνξοπρςστυφχψω∂ϵϑϰϕϱϖ ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> bfscrMapping = new()
    {
        { 'A', "𝓐" },
        { 'B', "𝓑" },
        { 'C', "𝓒" },
        { 'D', "𝓓" },
        { 'E', "𝓔" },
        { 'F', "𝓕" },
        { 'G', "𝓖" },
        { 'H', "𝓗" },
        { 'I', "𝓘" },
        { 'J', "𝓙" },
        { 'K', "𝓚" },
        { 'L', "𝓛" },
        { 'M', "𝓜" },
        { 'N', "𝓝" },
        { 'O', "𝓞" },
        { 'P', "𝓟" },
        { 'Q', "𝓠" },
        { 'R', "𝓡" },
        { 'S', "𝓢" },
        { 'T', "𝓣" },
        { 'U', "𝓤" },
        { 'V', "𝓥" },
        { 'W', "𝓦" },
        { 'X', "𝓧" },
        { 'Y', "𝓨" },
        { 'Z', "𝓩" },
        { 'a', "𝓪" },
        { 'b', "𝓫" },
        { 'c', "𝓬" },
        { 'd', "𝓭" },
        { 'e', "𝓮" },
        { 'f', "𝓯" },
        { 'g', "𝓰" },
        { 'h', "𝓱" },
        { 'i', "𝓲" },
        { 'j', "𝓳" },
        { 'k', "𝓴" },
        { 'l', "𝓵" },
        { 'm', "𝓶" },
        { 'n', "𝓷" },
        { 'o', "𝓸" },
        { 'p', "𝓹" },
        { 'q', "𝓺" },
        { 'r', "𝓻" },
        { 's', "𝓼" },
        { 't', "𝓽" },
        { 'u', "𝓾" },
        { 'v', "𝓿" },
        { 'w', "𝔀" },
        { 'x', "𝔁" },
        { 'y', "𝔂" },
        { 'z', "𝔃" },
    };
    private static readonly Regex bfscrPattern = new(@"\\bfscr\{([A-Za-z ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> sfitMapping = new()
    {
        { 'A', "𝘈" },
        { 'B', "𝘉" },
        { 'C', "𝘊" },
        { 'D', "𝘋" },
        { 'E', "𝘌" },
        { 'F', "𝘍" },
        { 'G', "𝘎" },
        { 'H', "𝘏" },
        { 'I', "𝘐" },
        { 'J', "𝘑" },
        { 'K', "𝘒" },
        { 'L', "𝘓" },
        { 'M', "𝘔" },
        { 'N', "𝘕" },
        { 'O', "𝘖" },
        { 'P', "𝘗" },
        { 'Q', "𝘘" },
        { 'R', "𝘙" },
        { 'S', "𝘚" },
        { 'T', "𝘛" },
        { 'U', "𝘜" },
        { 'V', "𝘝" },
        { 'W', "𝘞" },
        { 'X', "𝘟" },
        { 'Y', "𝘠" },
        { 'Z', "𝘡" },
        { 'a', "𝘢" },
        { 'b', "𝘣" },
        { 'c', "𝘤" },
        { 'd', "𝘥" },
        { 'e', "𝘦" },
        { 'f', "𝘧" },
        { 'g', "𝘨" },
        { 'h', "𝘩" },
        { 'i', "𝘪" },
        { 'j', "𝘫" },
        { 'k', "𝘬" },
        { 'l', "𝘭" },
        { 'm', "𝘮" },
        { 'n', "𝘯" },
        { 'o', "𝘰" },
        { 'p', "𝘱" },
        { 'q', "𝘲" },
        { 'r', "𝘳" },
        { 's', "𝘴" },
        { 't', "𝘵" },
        { 'u', "𝘶" },
        { 'v', "𝘷" },
        { 'w', "𝘸" },
        { 'x', "𝘹" },
        { 'y', "𝘺" },
        { 'z', "𝘻" },
    };
    private static readonly Regex sfitPattern = new(@"\\sfit\{([A-Za-z ]+?)\}", RegexOptions.Compiled);

    private static readonly Dictionary<char, string> bffrakMapping = new()
    {
        { 'A', "𝕬" },
        { 'B', "𝕭" },
        { 'C', "𝕮" },
        { 'D', "𝕯" },
        { 'E', "𝕰" },
        { 'F', "𝕱" },
        { 'G', "𝕲" },
        { 'H', "𝕳" },
        { 'I', "𝕴" },
        { 'J', "𝕵" },
        { 'K', "𝕶" },
        { 'L', "𝕷" },
        { 'M', "𝕸" },
        { 'N', "𝕹" },
        { 'O', "𝕺" },
        { 'P', "𝕻" },
        { 'Q', "𝕼" },
        { 'R', "𝕽" },
        { 'S', "𝕾" },
        { 'T', "𝕿" },
        { 'U', "𝖀" },
        { 'V', "𝖁" },
        { 'W', "𝖂" },
        { 'X', "𝖃" },
        { 'Y', "𝖄" },
        { 'Z', "𝖅" },
        { 'a', "𝖆" },
        { 'b', "𝖇" },
        { 'c', "𝖈" },
        { 'd', "𝖉" },
        { 'e', "𝖊" },
        { 'f', "𝖋" },
        { 'g', "𝖌" },
        { 'h', "𝖍" },
        { 'i', "𝖎" },
        { 'j', "𝖏" },
        { 'k', "𝖐" },
        { 'l', "𝖑" },
        { 'm', "𝖒" },
        { 'n', "𝖓" },
        { 'o', "𝖔" },
        { 'p', "𝖕" },
        { 'q', "𝖖" },
        { 'r', "𝖗" },
        { 's', "𝖘" },
        { 't', "𝖙" },
        { 'u', "𝖚" },
        { 'v', "𝖛" },
        { 'w', "𝖜" },
        { 'x', "𝖝" },
        { 'y', "𝖞" },
        { 'z', "𝖟" },
    };
    private static readonly Regex bffrakPattern = new(@"\\bffrak\{([A-Za-z ]+?)\}", RegexOptions.Compiled);

    private static string Remap(string str, Dictionary<char, string> mapping) =>
        string.Concat(str.Select((char ch) => mapping.TryGetValue(ch, out string replacement) ? replacement : ch.ToString()));

    public static string RemapInPattern(string str, Regex pattern, Dictionary<char, string> mapping) =>
        pattern.Replace(str, (Match match) => Remap(
            match.Groups[1].Value,
            mapping)
        );

    private static readonly (Regex pattern, Dictionary<char, string> mapping)[] patternMaps = [
        (superscriptPattern,  superscriptMapping),
        (superscriptPattern1, superscriptMapping),
        (subscriptPattern,    subscriptMapping),
        (subscriptPattern1,   subscriptMapping),
        (ttPattern,           ttMapping),
        (bfPattern,           bfMapping),
        (bbPattern,           bbMapping),
        (sfPattern,           sfMapping),
        (itPattern,           itMapping),
        (frakPattern,         frakMapping),
        (calPattern,          calMapping),
        (sfbfPattern,         sfbfMapping),
        (sfbfitPattern,       sfbfitMapping),
        (bfitPattern,         bfitMapping),
        (bfscrPattern,        bfscrMapping),
        (sfitPattern,         sfitMapping),
        (bffrakPattern,       bffrakMapping),
    ];

    public static string ApplyRemapPatterns(string str)
    {
        foreach (var (pattern, mapping) in patternMaps)
        {
            str = RemapInPattern(str, pattern, mapping);
        }

        return str;
    }

    private static string ApplyUnicodeShorthands(string str)
    {
        foreach (var (pattern, evaluator) in unicodeShorthands)
        {
            str = pattern.Replace(str, evaluator);
        }
        return str;
    }

    public static string ApplyUnicodeReplacements(string str)
    {
        str = ApplyUnicodeShorthands(str);
        foreach (string key in unicodeReplacements.Keys)
        {
            str = str.Replace(key, unicodeReplacements[key]);
        }
        return str;
    }
}
